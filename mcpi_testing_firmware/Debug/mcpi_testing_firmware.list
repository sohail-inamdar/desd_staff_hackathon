
mcpi_testing_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003848  08003848  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003850  08003850  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000208  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008f7a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001639  00000000  00000000  00029049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000838  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000064f  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020490  00000000  00000000  0002b50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000097b8  00000000  00000000  0004b99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c414c  00000000  00000000  00055157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002650  00000000  00000000  001192a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037d0 	.word	0x080037d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080037d0 	.word	0x080037d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <SPI_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SPI_Write(uint8_t reg, uint8_t *data, uint8_t size) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	// Enable CS (PE3=0)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <SPI_Write+0x4c>)
 8000592:	f000 fe5d 	bl	8001250 <HAL_GPIO_WritePin>
	// Send register (internal) address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059c:	2201      	movs	r2, #1
 800059e:	480b      	ldr	r0, [pc, #44]	; (80005cc <SPI_Write+0x50>)
 80005a0:	f001 fb91 	bl	8001cc6 <HAL_SPI_Transmit>
	// Send data of given size
	HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ac:	6839      	ldr	r1, [r7, #0]
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <SPI_Write+0x50>)
 80005b0:	f001 fb89 	bl	8001cc6 <HAL_SPI_Transmit>
	// Disable CS (PE3=1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2108      	movs	r1, #8
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <SPI_Write+0x4c>)
 80005ba:	f000 fe49 	bl	8001250 <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	20000078 	.word	0x20000078

080005d0 <SPI_Read>:

void SPI_Read(uint8_t reg, uint8_t *data, int size) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	73fb      	strb	r3, [r7, #15]
	// Enable CS (PE3=0)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	4810      	ldr	r0, [pc, #64]	; (8000624 <SPI_Read+0x54>)
 80005e4:	f000 fe34 	bl	8001250 <HAL_GPIO_WritePin>
	// Send register (internal) address (msb=1 for read op with LIS3DSH)
	reg |= BV(7);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	2201      	movs	r2, #1
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <SPI_Read+0x58>)
 80005fe:	f001 fb62 	bl	8001cc6 <HAL_SPI_Transmit>
	// Receive data of given size
	HAL_SPI_Receive(&hspi1, data, size, HAL_MAX_DELAY);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <SPI_Read+0x58>)
 800060e:	f001 fc96 	bl	8001f3e <HAL_SPI_Receive>
	// Disable CS (PE3=1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <SPI_Read+0x54>)
 8000618:	f000 fe1a 	bl	8001250 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	20000078 	.word	0x20000078

0800062c <LIS3DSH_Init>:
void LIS3DSH_Init(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	// cr4 = odr = 25 hz, xen, yen, zen
	uint8_t val = LIS3DSH_CR4_ODR_25HZ | LIS3DSH_CR4_XEN | LIS3DSH_CR4_YEN | LIS3DSH_CR4_ZEN;
 8000632:	2347      	movs	r3, #71	; 0x47
 8000634:	71fb      	strb	r3, [r7, #7]
	SPI_Write(LIS3DSH_CONTROL_REG4_ADDR, &val, 1);
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	2020      	movs	r0, #32
 800063e:	f7ff ff9d 	bl	800057c <SPI_Write>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <LIS3DSH_WaitForDataAvail>:

void LIS3DSH_WaitForDataAvail(void) {
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
	uint8_t val;
	// wait while status regr xda, yda and zda bits are zero
	do {
		SPI_Read(LIS3DSH_STATUS_REG_ADDR, &val, 1);
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	2027      	movs	r0, #39	; 0x27
 8000658:	f7ff ffba 	bl	80005d0 <SPI_Read>
	} while( (val & LIS3DSH_SR_XYZ_MSK) == 0);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f4      	beq.n	8000650 <LIS3DSH_WaitForDataAvail+0x6>
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <LIS3DSH_ReadData>:
void LIS3DSH_ReadData(LIS3DSH_Data *data) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];
	// read xl and xh readings and convert to x 16-bit reading
	SPI_Read(LIS3DSH_OUT_XL_ADDR, buf, 2);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2202      	movs	r2, #2
 800067e:	4619      	mov	r1, r3
 8000680:	2028      	movs	r0, #40	; 0x28
 8000682:	f7ff ffa5 	bl	80005d0 <SPI_Read>
	data->x = (((uint16_t)buf[1]) << 8) | buf[0];
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7b3b      	ldrb	r3, [r7, #12]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21a      	sxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	801a      	strh	r2, [r3, #0]

	// read yl and yh readings and convert to y 16-bit reading
	SPI_Read(LIS3DSH_OUT_YL_ADDR, buf, 2);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2202      	movs	r2, #2
 800069e:	4619      	mov	r1, r3
 80006a0:	202a      	movs	r0, #42	; 0x2a
 80006a2:	f7ff ff95 	bl	80005d0 <SPI_Read>
	data->y = (((uint16_t)buf[1]) << 8) | buf[0];
 80006a6:	7b7b      	ldrb	r3, [r7, #13]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	7b3b      	ldrb	r3, [r7, #12]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	805a      	strh	r2, [r3, #2]

	// read zl and zh readings and convert to z 16-bit reading
	SPI_Read(LIS3DSH_OUT_ZL_ADDR, buf, 2);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2202      	movs	r2, #2
 80006be:	4619      	mov	r1, r3
 80006c0:	202c      	movs	r0, #44	; 0x2c
 80006c2:	f7ff ff85 	bl	80005d0 <SPI_Read>
	data->z = (((uint16_t)buf[1]) << 8) | buf[0];
 80006c6:	7b7b      	ldrb	r3, [r7, #13]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	809a      	strh	r2, [r3, #4]
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fa9b 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f833 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f8fb 	bl	80008e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006f2:	f000 f899 	bl	8000828 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006f6:	f000 f8cd 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LIS3DSH_Init();
 80006fa:	f7ff ff97 	bl	800062c <LIS3DSH_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	  char str[32];
  LIS3DSH_Data data;
  LIS3DSH_WaitForDataAvail(); // wait for x, y or z reading to change
 80006fe:	f7ff ffa4 	bl	800064a <LIS3DSH_WaitForDataAvail>
  LIS3DSH_ReadData(&data); // get accel reading
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffb2 	bl	8000670 <LIS3DSH_ReadData>
  sprintf(str, "x=%d, y=%d, z=%d\r\n", data.x, data.y, data.z); // convert reading into string
 800070c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000710:	461a      	mov	r2, r3
 8000712:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000716:	4619      	mov	r1, r3
 8000718:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800071c:	4638      	mov	r0, r7
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	460b      	mov	r3, r1
 8000722:	490a      	ldr	r1, [pc, #40]	; (800074c <main+0x6c>)
 8000724:	f002 fbb0 	bl	8002e88 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY); // send it to uart
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd50 	bl	80001d0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	4639      	mov	r1, r7
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <main+0x70>)
 800073c:	f002 f82f 	bl	800279e <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f000 fade 	bl	8000d04 <HAL_Delay>
  {	  char str[32];
 8000748:	e7d9      	b.n	80006fe <main+0x1e>
 800074a:	bf00      	nop
 800074c:	080037e8 	.word	0x080037e8
 8000750:	200000d0 	.word	0x200000d0

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fbb0 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <SystemClock_Config+0xcc>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <SystemClock_Config+0xd0>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c4:	2308      	movs	r3, #8
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007c8:	2332      	movs	r3, #50	; 0x32
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d0:	2307      	movs	r3, #7
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fd53 	bl	8001284 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e4:	f000 f8c2 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ffb4 	bl	8001774 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000812:	f000 f8ab 	bl	800096c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI1_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI1_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI1_Init+0x64>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0x64>)
 800085c:	2210      	movs	r2, #16
 800085e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI1_Init+0x64>)
 800087a:	f001 f99b 	bl	8001bb4 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 f872 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000078 	.word	0x20000078
 8000890:	40013000 	.word	0x40013000

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f001 ff1a 	bl	8002704 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f849 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000d0 	.word	0x200000d0
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_GPIO_Init+0x7c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2108      	movs	r1, #8
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <MX_GPIO_Init+0x80>)
 800093c:	f000 fc88 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000940:	2308      	movs	r3, #8
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0x80>)
 8000958:	f000 fade 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40021000 	.word	0x40021000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b6:	2007      	movs	r0, #7
 80009b8:	f000 fa7a 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a22:	23e0      	movs	r3, #224	; 0xe0
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a32:	2305      	movs	r3, #5
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a3e:	f000 fa6b 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40013000 	.word	0x40013000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12b      	bne.n	8000ad2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ace:	f000 fa23 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f8c6 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f002 f9b4 	bl	8002ed8 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20020000 	.word	0x20020000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000114 	.word	0x20000114
 8000ba4:	20000268 	.word	0x20000268

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 f973 	bl	8002ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd6f 	bl	80006e0 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c10:	08003858 	.word	0x08003858
  ldr r2, =_sbss
 8000c14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c18:	20000264 	.word	0x20000264

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f931 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe90 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f93b 	bl	8000efe <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	f000 f911 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000118 	.word	0x20000118

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000118 	.word	0x20000118

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5c 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb0 	bl	8000e6c <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e16b      	b.n	800120c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 815a 	bne.w	8001206 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80b4 	beq.w	8001206 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b60      	ldr	r3, [pc, #384]	; (8001224 <HAL_GPIO_Init+0x30c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <HAL_GPIO_Init+0x30c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <HAL_GPIO_Init+0x30c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a5b      	ldr	r2, [pc, #364]	; (8001228 <HAL_GPIO_Init+0x310>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a52      	ldr	r2, [pc, #328]	; (800122c <HAL_GPIO_Init+0x314>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d02b      	beq.n	800113e <HAL_GPIO_Init+0x226>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a51      	ldr	r2, [pc, #324]	; (8001230 <HAL_GPIO_Init+0x318>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d025      	beq.n	800113a <HAL_GPIO_Init+0x222>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a50      	ldr	r2, [pc, #320]	; (8001234 <HAL_GPIO_Init+0x31c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01f      	beq.n	8001136 <HAL_GPIO_Init+0x21e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <HAL_GPIO_Init+0x320>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4e      	ldr	r2, [pc, #312]	; (800123c <HAL_GPIO_Init+0x324>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x216>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <HAL_GPIO_Init+0x328>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x212>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <HAL_GPIO_Init+0x32c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x20e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4b      	ldr	r2, [pc, #300]	; (8001248 <HAL_GPIO_Init+0x330>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x20a>
 800111e:	2307      	movs	r3, #7
 8001120:	e00e      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001122:	2308      	movs	r3, #8
 8001124:	e00c      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001126:	2306      	movs	r3, #6
 8001128:	e00a      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800112e:	2304      	movs	r3, #4
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_GPIO_Init+0x310>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_GPIO_Init+0x334>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a32      	ldr	r2, [pc, #200]	; (800124c <HAL_GPIO_Init+0x334>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_GPIO_Init+0x334>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <HAL_GPIO_Init+0x334>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_GPIO_Init+0x334>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d6:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_GPIO_Init+0x334>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_GPIO_Init+0x334>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <HAL_GPIO_Init+0x334>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f ae90 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40021400 	.word	0x40021400
 8001244:	40021800 	.word	0x40021800
 8001248:	40021c00 	.word	0x40021c00
 800124c:	40013c00 	.word	0x40013c00

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e267      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d075      	beq.n	800138e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d00c      	beq.n	80012c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d112      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b82      	ldr	r3, [pc, #520]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c6:	d10b      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d05b      	beq.n	800138c <HAL_RCC_OscConfig+0x108>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d157      	bne.n	800138c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e242      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x74>
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a75      	ldr	r2, [pc, #468]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6f      	ldr	r2, [pc, #444]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6c      	ldr	r2, [pc, #432]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 800131c:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a68      	ldr	r2, [pc, #416]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a65      	ldr	r2, [pc, #404]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fcd6 	bl	8000cec <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fcd2 	bl	8000cec <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e207      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xc0>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fcc2 	bl	8000cec <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fcbe 	bl	8000cec <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1f3      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	4b51      	ldr	r3, [pc, #324]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0xe8>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e1c7      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e03a      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x244>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fc77 	bl	8000cec <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fc73 	bl	8000cec <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1a8      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4925      	ldr	r1, [pc, #148]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x244>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fc56 	bl	8000cec <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fc52 	bl	8000cec <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e187      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d036      	beq.n	80014dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d016      	beq.n	80014a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_RCC_OscConfig+0x248>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fc36 	bl	8000cec <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fc32 	bl	8000cec <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e167      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x200>
 80014a2:	e01b      	b.n	80014dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_RCC_OscConfig+0x248>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fc1f 	bl	8000cec <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	e00e      	b.n	80014d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc1b 	bl	8000cec <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d907      	bls.n	80014d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e150      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470000 	.word	0x42470000
 80014cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ea      	bne.n	80014b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8097 	beq.w	8001618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a7c      	ldr	r2, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a73      	ldr	r2, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fbdb 	bl	8000cec <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fbd7 	bl	8000cec <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e10c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x2ea>
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x30c>
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 8001590:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a54      	ldr	r2, [pc, #336]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d015      	beq.n	80015dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fb9c 	bl	8000cec <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb98 	bl	8000cec <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0cb      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0ee      	beq.n	80015b8 <HAL_RCC_OscConfig+0x334>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fb86 	bl	8000cec <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb82 	bl	8000cec <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0b5      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ee      	bne.n	80015e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a38      	ldr	r2, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a1 	beq.w	8001764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d05c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d141      	bne.n	80016ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb56 	bl	8000cec <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fb52 	bl	8000cec <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e087      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	3b01      	subs	r3, #1
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	061b      	lsls	r3, r3, #24
 8001686:	491b      	ldr	r1, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb2b 	bl	8000cec <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fb27 	bl	8000cec <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e05c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x416>
 80016b8:	e054      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb14 	bl	8000cec <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fb10 	bl	8000cec <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e045      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
 80016e6:	e03d      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e038      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x4ec>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d028      	beq.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d121      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001738:	4293      	cmp	r3, r2
 800173a:	d111      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	3b01      	subs	r3, #1
 800174a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fa42 	bl	8000cec <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff fa3e 	bl	8000cec <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9a2 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	080037fc 	.word	0x080037fc
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b094      	sub	sp, #80	; 0x50
 8001946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
 800194c:	2300      	movs	r3, #0
 800194e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001950:	2300      	movs	r3, #0
 8001952:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001958:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d00d      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 8001964:	2b08      	cmp	r3, #8
 8001966:	f200 80e1 	bhi.w	8001b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x34>
 800196e:	2b04      	cmp	r3, #4
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x3a>
 8001972:	e0db      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001978:	e0db      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800197c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197e:	e0d8      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198a:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
 80019ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019b2:	4622      	mov	r2, r4
 80019b4:	462b      	mov	r3, r5
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	0159      	lsls	r1, r3, #5
 80019c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c4:	0150      	lsls	r0, r2, #5
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4621      	mov	r1, r4
 80019cc:	1a51      	subs	r1, r2, r1
 80019ce:	6139      	str	r1, [r7, #16]
 80019d0:	4629      	mov	r1, r5
 80019d2:	eb63 0301 	sbc.w	r3, r3, r1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e4:	4659      	mov	r1, fp
 80019e6:	018b      	lsls	r3, r1, #6
 80019e8:	4651      	mov	r1, sl
 80019ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ee:	4651      	mov	r1, sl
 80019f0:	018a      	lsls	r2, r1, #6
 80019f2:	4651      	mov	r1, sl
 80019f4:	ebb2 0801 	subs.w	r8, r2, r1
 80019f8:	4659      	mov	r1, fp
 80019fa:	eb63 0901 	sbc.w	r9, r3, r1
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a12:	4690      	mov	r8, r2
 8001a14:	4699      	mov	r9, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	eb18 0303 	adds.w	r3, r8, r3
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	462b      	mov	r3, r5
 8001a20:	eb49 0303 	adc.w	r3, r9, r3
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a32:	4629      	mov	r1, r5
 8001a34:	024b      	lsls	r3, r1, #9
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	024a      	lsls	r2, r1, #9
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a50:	f7fe fc16 	bl	8000280 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a5c:	e058      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	2200      	movs	r2, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	4611      	mov	r1, r2
 8001a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a78:	4642      	mov	r2, r8
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	0159      	lsls	r1, r3, #5
 8001a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8a:	0150      	lsls	r0, r2, #5
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4641      	mov	r1, r8
 8001a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a96:	4649      	mov	r1, r9
 8001a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	00eb      	lsls	r3, r5, #3
 8001ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac6:	00e2      	lsls	r2, r4, #3
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	4643      	mov	r3, r8
 8001ace:	18e3      	adds	r3, r4, r3
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	eb45 0303 	adc.w	r3, r5, r3
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	028b      	lsls	r3, r1, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af0:	4621      	mov	r1, r4
 8001af2:	028a      	lsls	r2, r1, #10
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	2200      	movs	r2, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	61fa      	str	r2, [r7, #28]
 8001b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b04:	f7fe fbbc 	bl	8000280 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3750      	adds	r7, #80	; 0x50
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	007a1200 	.word	0x007a1200

08001b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	0800380c 	.word	0x0800380c

08001b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b90:	f7ff ffdc 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0b5b      	lsrs	r3, r3, #13
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	0800380c 	.word	0x0800380c

08001bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07b      	b.n	8001cbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d108      	bne.n	8001be0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bd6:	d009      	beq.n	8001bec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	e005      	b.n	8001bec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fede 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	ea42 0103 	orr.w	r1, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f003 0104 	and.w	r1, r3, #4
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f003 0210 	and.w	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b088      	sub	sp, #32
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_SPI_Transmit+0x22>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e126      	b.n	8001f36 <HAL_SPI_Transmit+0x270>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cf0:	f7fe fffc 	bl	8000cec <HAL_GetTick>
 8001cf4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d002      	beq.n	8001d0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d0a:	e10b      	b.n	8001f24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_SPI_Transmit+0x52>
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d1c:	e102      	b.n	8001f24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d64:	d10f      	bne.n	8001d86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d007      	beq.n	8001da4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dac:	d14b      	bne.n	8001e46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_SPI_Transmit+0xf6>
 8001db6:	8afb      	ldrh	r3, [r7, #22]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d13e      	bne.n	8001e3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	1c9a      	adds	r2, r3, #2
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001de0:	e02b      	b.n	8001e3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d112      	bne.n	8001e16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	881a      	ldrh	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e14:	e011      	b.n	8001e3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e16:	f7fe ff69 	bl	8000cec <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d803      	bhi.n	8001e2e <HAL_SPI_Transmit+0x168>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e2c:	d102      	bne.n	8001e34 <HAL_SPI_Transmit+0x16e>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e38:	e074      	b.n	8001f24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ce      	bne.n	8001de2 <HAL_SPI_Transmit+0x11c>
 8001e44:	e04c      	b.n	8001ee0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_SPI_Transmit+0x18e>
 8001e4e:	8afb      	ldrh	r3, [r7, #22]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d140      	bne.n	8001ed6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e7a:	e02c      	b.n	8001ed6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d113      	bne.n	8001eb2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	330c      	adds	r3, #12
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eb0:	e011      	b.n	8001ed6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb2:	f7fe ff1b 	bl	8000cec <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d803      	bhi.n	8001eca <HAL_SPI_Transmit+0x204>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec8:	d102      	bne.n	8001ed0 <HAL_SPI_Transmit+0x20a>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ed4:	e026      	b.n	8001f24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1cd      	bne.n	8001e7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fbcb 	bl	8002680 <SPI_EndRxTxTransaction>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	77fb      	strb	r3, [r7, #31]
 8001f20:	e000      	b.n	8001f24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b088      	sub	sp, #32
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f5a:	d112      	bne.n	8001f82 <HAL_SPI_Receive+0x44>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2204      	movs	r2, #4
 8001f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f6c:	88fa      	ldrh	r2, [r7, #6]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f8f1 	bl	8002160 <HAL_SPI_TransmitReceive>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	e0ea      	b.n	8002158 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_SPI_Receive+0x52>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e0e3      	b.n	8002158 <HAL_SPI_Receive+0x21a>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f98:	f7fe fea8 	bl	8000cec <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d002      	beq.n	8001fb0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fae:	e0ca      	b.n	8002146 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_SPI_Receive+0x7e>
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fc0:	e0c1      	b.n	8002146 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	88fa      	ldrh	r2, [r7, #6]
 8001fe0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002008:	d10f      	bne.n	800202a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d007      	beq.n	8002048 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d162      	bne.n	8002116 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002050:	e02e      	b.n	80020b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d115      	bne.n	800208c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f103 020c 	add.w	r2, r3, #12
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	87da      	strh	r2, [r3, #62]	; 0x3e
 800208a:	e011      	b.n	80020b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800208c:	f7fe fe2e 	bl	8000cec <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d803      	bhi.n	80020a4 <HAL_SPI_Receive+0x166>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a2:	d102      	bne.n	80020aa <HAL_SPI_Receive+0x16c>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020ae:	e04a      	b.n	8002146 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1cb      	bne.n	8002052 <HAL_SPI_Receive+0x114>
 80020ba:	e031      	b.n	8002120 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d113      	bne.n	80020f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	b292      	uxth	r2, r2
 80020d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	1c9a      	adds	r2, r3, #2
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020f0:	e011      	b.n	8002116 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f2:	f7fe fdfb 	bl	8000cec <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d803      	bhi.n	800210a <HAL_SPI_Receive+0x1cc>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002108:	d102      	bne.n	8002110 <HAL_SPI_Receive+0x1d2>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002114:	e017      	b.n	8002146 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1cd      	bne.n	80020bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	6839      	ldr	r1, [r7, #0]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa45 	bl	80025b4 <SPI_EndRxTransaction>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
 8002142:	e000      	b.n	8002146 <HAL_SPI_Receive+0x208>
  }

error :
 8002144:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002156:	7dfb      	ldrb	r3, [r7, #23]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800216e:	2301      	movs	r3, #1
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_SPI_TransmitReceive+0x26>
 8002182:	2302      	movs	r3, #2
 8002184:	e18a      	b.n	800249c <HAL_SPI_TransmitReceive+0x33c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800218e:	f7fe fdad 	bl	8000cec <HAL_GetTick>
 8002192:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00f      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x70>
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021b6:	d107      	bne.n	80021c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <HAL_SPI_TransmitReceive+0x68>
 80021c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d003      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
 80021ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021ce:	e15b      	b.n	8002488 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x82>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x82>
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021e8:	e14e      	b.n	8002488 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d007      	beq.n	8002252 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225a:	d178      	bne.n	800234e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_SPI_TransmitReceive+0x10a>
 8002264:	8b7b      	ldrh	r3, [r7, #26]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d166      	bne.n	8002338 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	1c9a      	adds	r2, r3, #2
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228e:	e053      	b.n	8002338 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11b      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x176>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d016      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x176>
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d113      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	1c9a      	adds	r2, r3, #2
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d119      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x1b8>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	b292      	uxth	r2, r2
 80022fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002314:	2301      	movs	r3, #1
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002318:	f7fe fce8 	bl	8000cec <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002324:	429a      	cmp	r2, r3
 8002326:	d807      	bhi.n	8002338 <HAL_SPI_TransmitReceive+0x1d8>
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800232e:	d003      	beq.n	8002338 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002336:	e0a7      	b.n	8002488 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1a6      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x130>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1a1      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x130>
 800234c:	e07c      	b.n	8002448 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_SPI_TransmitReceive+0x1fc>
 8002356:	8b7b      	ldrh	r3, [r7, #26]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d16b      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002382:	e057      	b.n	8002434 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d11c      	bne.n	80023cc <HAL_SPI_TransmitReceive+0x26c>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_SPI_TransmitReceive+0x26c>
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d114      	bne.n	80023cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d119      	bne.n	800240e <HAL_SPI_TransmitReceive+0x2ae>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d014      	beq.n	800240e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800240a:	2301      	movs	r3, #1
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800240e:	f7fe fc6d 	bl	8000cec <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800241a:	429a      	cmp	r2, r3
 800241c:	d803      	bhi.n	8002426 <HAL_SPI_TransmitReceive+0x2c6>
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002424:	d102      	bne.n	800242c <HAL_SPI_TransmitReceive+0x2cc>
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002432:	e029      	b.n	8002488 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1a2      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x224>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d19d      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f917 	bl	8002680 <SPI_EndRxTxTransaction>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002464:	e010      	b.n	8002488 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	e000      	b.n	8002488 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800249c:	4618      	mov	r0, r3
 800249e:	3730      	adds	r7, #48	; 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024b4:	f7fe fc1a 	bl	8000cec <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024c4:	f7fe fc12 	bl	8000cec <HAL_GetTick>
 80024c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	015b      	lsls	r3, r3, #5
 80024d0:	0d1b      	lsrs	r3, r3, #20
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024da:	e054      	b.n	8002586 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e2:	d050      	beq.n	8002586 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024e4:	f7fe fc02 	bl	8000cec <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d902      	bls.n	80024fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d13d      	bne.n	8002576 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002508:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002512:	d111      	bne.n	8002538 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251c:	d004      	beq.n	8002528 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d107      	bne.n	8002538 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002536:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002540:	d10f      	bne.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002560:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e017      	b.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3b01      	subs	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d19b      	bne.n	80024dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000000 	.word	0x20000000

080025b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c8:	d111      	bne.n	80025ee <SPI_EndRxTransaction+0x3a>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d2:	d004      	beq.n	80025de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025dc:	d107      	bne.n	80025ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f6:	d12a      	bne.n	800264e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	d012      	beq.n	8002628 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7ff ff49 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02d      	beq.n	8002674 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e026      	b.n	8002676 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	2101      	movs	r1, #1
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff ff36 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01a      	beq.n	8002674 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e013      	b.n	8002676 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff ff23 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e000      	b.n	8002676 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <SPI_EndRxTxTransaction+0x7c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <SPI_EndRxTxTransaction+0x80>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0d5b      	lsrs	r3, r3, #21
 8002698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d112      	bne.n	80026d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff fef4 	bl	80024a4 <SPI_WaitFlagStateUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e00f      	b.n	80026f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3b01      	subs	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d0f2      	beq.n	80026d2 <SPI_EndRxTxTransaction+0x52>
 80026ec:	e000      	b.n	80026f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80026ee:	bf00      	nop
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000000 	.word	0x20000000
 8002700:	165e9f81 	.word	0x165e9f81

08002704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e03f      	b.n	8002796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f994 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f929 	bl	80029a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800275c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800276c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800277c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b08a      	sub	sp, #40	; 0x28
 80027a2:	af02      	add	r7, sp, #8
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d17c      	bne.n	80028b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_UART_Transmit+0x2c>
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e075      	b.n	80028ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Transmit+0x3e>
 80027d8:	2302      	movs	r3, #2
 80027da:	e06e      	b.n	80028ba <HAL_UART_Transmit+0x11c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2221      	movs	r2, #33	; 0x21
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe fa7b 	bl	8000cec <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Transmit+0x82>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002830:	e02a      	b.n	8002888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f840 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e036      	b.n	80028ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3302      	adds	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e007      	b.n	800287a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1cf      	bne.n	8002832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	2140      	movs	r1, #64	; 0x40
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f810 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e006      	b.n	80028ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b090      	sub	sp, #64	; 0x40
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d2:	e050      	b.n	8002976 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028da:	d04c      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e2:	f7fe fa03 	bl	8000cec <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d241      	bcs.n	8002976 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002912:	637a      	str	r2, [r7, #52]	; 0x34
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e5      	bne.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	613b      	str	r3, [r7, #16]
   return(result);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002946:	623a      	str	r2, [r7, #32]
 8002948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	69f9      	ldr	r1, [r7, #28]
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	61bb      	str	r3, [r7, #24]
   return(result);
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e00f      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d09f      	beq.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3740      	adds	r7, #64	; 0x40
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b0c0      	sub	sp, #256	; 0x100
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	68d9      	ldr	r1, [r3, #12]
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	ea40 0301 	orr.w	r3, r0, r1
 80029c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	431a      	orrs	r2, r3
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029f8:	f021 010c 	bic.w	r1, r1, #12
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a06:	430b      	orrs	r3, r1
 8002a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1a:	6999      	ldr	r1, [r3, #24]
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	ea40 0301 	orr.w	r3, r0, r1
 8002a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b8f      	ldr	r3, [pc, #572]	; (8002c6c <UART_SetConfig+0x2cc>)
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d005      	beq.n	8002a40 <UART_SetConfig+0xa0>
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <UART_SetConfig+0x2d0>)
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d104      	bne.n	8002a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff f8a4 	bl	8001b8c <HAL_RCC_GetPCLK2Freq>
 8002a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a48:	e003      	b.n	8002a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a4a:	f7ff f88b 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8002a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5c:	f040 810c 	bne.w	8002c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a72:	4622      	mov	r2, r4
 8002a74:	462b      	mov	r3, r5
 8002a76:	1891      	adds	r1, r2, r2
 8002a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a7a:	415b      	adcs	r3, r3
 8002a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a82:	4621      	mov	r1, r4
 8002a84:	eb12 0801 	adds.w	r8, r2, r1
 8002a88:	4629      	mov	r1, r5
 8002a8a:	eb43 0901 	adc.w	r9, r3, r1
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa2:	4690      	mov	r8, r2
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	eb18 0303 	adds.w	r3, r8, r3
 8002aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	eb49 0303 	adc.w	r3, r9, r3
 8002ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ace:	460b      	mov	r3, r1
 8002ad0:	18db      	adds	r3, r3, r3
 8002ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	eb42 0303 	adc.w	r3, r2, r3
 8002ada:	657b      	str	r3, [r7, #84]	; 0x54
 8002adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ae4:	f7fd fbcc 	bl	8000280 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <UART_SetConfig+0x2d4>)
 8002aee:	fba3 2302 	umull	r2, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	011c      	lsls	r4, r3, #4
 8002af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b08:	4642      	mov	r2, r8
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	1891      	adds	r1, r2, r2
 8002b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b10:	415b      	adcs	r3, r3
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b18:	4641      	mov	r1, r8
 8002b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b1e:	4649      	mov	r1, r9
 8002b20:	eb43 0b01 	adc.w	fp, r3, r1
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b38:	4692      	mov	sl, r2
 8002b3a:	469b      	mov	fp, r3
 8002b3c:	4643      	mov	r3, r8
 8002b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b46:	464b      	mov	r3, r9
 8002b48:	eb4b 0303 	adc.w	r3, fp, r3
 8002b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b64:	460b      	mov	r3, r1
 8002b66:	18db      	adds	r3, r3, r3
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	eb42 0303 	adc.w	r3, r2, r3
 8002b70:	647b      	str	r3, [r7, #68]	; 0x44
 8002b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b7a:	f7fd fb81 	bl	8000280 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <UART_SetConfig+0x2d4>)
 8002b86:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2264      	movs	r2, #100	; 0x64
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b9a:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <UART_SetConfig+0x2d4>)
 8002b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ba8:	441c      	add	r4, r3
 8002baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1891      	adds	r1, r2, r2
 8002bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bc4:	415b      	adcs	r3, r3
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bcc:	4641      	mov	r1, r8
 8002bce:	1851      	adds	r1, r2, r1
 8002bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	414b      	adcs	r3, r1
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002be4:	4659      	mov	r1, fp
 8002be6:	00cb      	lsls	r3, r1, #3
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bee:	4651      	mov	r1, sl
 8002bf0:	00ca      	lsls	r2, r1, #3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	189b      	adds	r3, r3, r2
 8002bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c00:	464b      	mov	r3, r9
 8002c02:	460a      	mov	r2, r1
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c20:	460b      	mov	r3, r1
 8002c22:	18db      	adds	r3, r3, r3
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c26:	4613      	mov	r3, r2
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c36:	f7fd fb23 	bl	8000280 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <UART_SetConfig+0x2d4>)
 8002c40:	fba3 1302 	umull	r1, r3, r3, r2
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	2164      	movs	r1, #100	; 0x64
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	3332      	adds	r3, #50	; 0x32
 8002c52:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <UART_SetConfig+0x2d4>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	f003 0207 	and.w	r2, r3, #7
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4422      	add	r2, r4
 8002c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c68:	e106      	b.n	8002e78 <UART_SetConfig+0x4d8>
 8002c6a:	bf00      	nop
 8002c6c:	40011000 	.word	0x40011000
 8002c70:	40011400 	.word	0x40011400
 8002c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c8a:	4642      	mov	r2, r8
 8002c8c:	464b      	mov	r3, r9
 8002c8e:	1891      	adds	r1, r2, r2
 8002c90:	6239      	str	r1, [r7, #32]
 8002c92:	415b      	adcs	r3, r3
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c9a:	4641      	mov	r1, r8
 8002c9c:	1854      	adds	r4, r2, r1
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	eb43 0501 	adc.w	r5, r3, r1
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	00eb      	lsls	r3, r5, #3
 8002cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb2:	00e2      	lsls	r2, r4, #3
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	4643      	mov	r3, r8
 8002cba:	18e3      	adds	r3, r4, r3
 8002cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	eb45 0303 	adc.w	r3, r5, r3
 8002cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	008b      	lsls	r3, r1, #2
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	008a      	lsls	r2, r1, #2
 8002cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cf8:	f7fd fac2 	bl	8000280 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <UART_SetConfig+0x4e4>)
 8002d02:	fba3 2302 	umull	r2, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	011c      	lsls	r4, r3, #4
 8002d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	464b      	mov	r3, r9
 8002d20:	1891      	adds	r1, r2, r2
 8002d22:	61b9      	str	r1, [r7, #24]
 8002d24:	415b      	adcs	r3, r3
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	1851      	adds	r1, r2, r1
 8002d30:	6139      	str	r1, [r7, #16]
 8002d32:	4649      	mov	r1, r9
 8002d34:	414b      	adcs	r3, r1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d44:	4659      	mov	r1, fp
 8002d46:	00cb      	lsls	r3, r1, #3
 8002d48:	4651      	mov	r1, sl
 8002d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d4e:	4651      	mov	r1, sl
 8002d50:	00ca      	lsls	r2, r1, #3
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	4642      	mov	r2, r8
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d60:	464b      	mov	r3, r9
 8002d62:	460a      	mov	r2, r1
 8002d64:	eb42 0303 	adc.w	r3, r2, r3
 8002d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d84:	4649      	mov	r1, r9
 8002d86:	008b      	lsls	r3, r1, #2
 8002d88:	4641      	mov	r1, r8
 8002d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d8e:	4641      	mov	r1, r8
 8002d90:	008a      	lsls	r2, r1, #2
 8002d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d96:	f7fd fa73 	bl	8000280 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <UART_SetConfig+0x4e4>)
 8002da2:	fba3 2301 	umull	r2, r3, r3, r1
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2264      	movs	r2, #100	; 0x64
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	1acb      	subs	r3, r1, r3
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	3332      	adds	r3, #50	; 0x32
 8002db4:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <UART_SetConfig+0x4e4>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc0:	441c      	add	r4, r3
 8002dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8002dca:	677a      	str	r2, [r7, #116]	; 0x74
 8002dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	1891      	adds	r1, r2, r2
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de0:	4641      	mov	r1, r8
 8002de2:	1851      	adds	r1, r2, r1
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	4649      	mov	r1, r9
 8002de8:	414b      	adcs	r3, r1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002df8:	4659      	mov	r1, fp
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4651      	mov	r1, sl
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e12:	464b      	mov	r3, r9
 8002e14:	460a      	mov	r2, r1
 8002e16:	eb42 0303 	adc.w	r3, r2, r3
 8002e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	663b      	str	r3, [r7, #96]	; 0x60
 8002e26:	667a      	str	r2, [r7, #100]	; 0x64
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e34:	4649      	mov	r1, r9
 8002e36:	008b      	lsls	r3, r1, #2
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e3e:	4641      	mov	r1, r8
 8002e40:	008a      	lsls	r2, r1, #2
 8002e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e46:	f7fd fa1b 	bl	8000280 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <UART_SetConfig+0x4e4>)
 8002e50:	fba3 1302 	umull	r1, r3, r3, r2
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	2164      	movs	r1, #100	; 0x64
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	3332      	adds	r3, #50	; 0x32
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <UART_SetConfig+0x4e4>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	f003 020f 	and.w	r2, r3, #15
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4422      	add	r2, r4
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e84:	51eb851f 	.word	0x51eb851f

08002e88 <siprintf>:
 8002e88:	b40e      	push	{r1, r2, r3}
 8002e8a:	b500      	push	{lr}
 8002e8c:	b09c      	sub	sp, #112	; 0x70
 8002e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e90:	9002      	str	r0, [sp, #8]
 8002e92:	9006      	str	r0, [sp, #24]
 8002e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e98:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <siprintf+0x38>)
 8002e9a:	9107      	str	r1, [sp, #28]
 8002e9c:	9104      	str	r1, [sp, #16]
 8002e9e:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <siprintf+0x3c>)
 8002ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ea4:	9105      	str	r1, [sp, #20]
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	a902      	add	r1, sp, #8
 8002eac:	f000 f992 	bl	80031d4 <_svfiprintf_r>
 8002eb0:	9b02      	ldr	r3, [sp, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	b01c      	add	sp, #112	; 0x70
 8002eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ebc:	b003      	add	sp, #12
 8002ebe:	4770      	bx	lr
 8002ec0:	20000058 	.word	0x20000058
 8002ec4:	ffff0208 	.word	0xffff0208

08002ec8 <memset>:
 8002ec8:	4402      	add	r2, r0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <__errno>:
 8002ed8:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <__errno+0x8>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000058 	.word	0x20000058

08002ee4 <__libc_init_array>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4d0d      	ldr	r5, [pc, #52]	; (8002f1c <__libc_init_array+0x38>)
 8002ee8:	4c0d      	ldr	r4, [pc, #52]	; (8002f20 <__libc_init_array+0x3c>)
 8002eea:	1b64      	subs	r4, r4, r5
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	2600      	movs	r6, #0
 8002ef0:	42a6      	cmp	r6, r4
 8002ef2:	d109      	bne.n	8002f08 <__libc_init_array+0x24>
 8002ef4:	4d0b      	ldr	r5, [pc, #44]	; (8002f24 <__libc_init_array+0x40>)
 8002ef6:	4c0c      	ldr	r4, [pc, #48]	; (8002f28 <__libc_init_array+0x44>)
 8002ef8:	f000 fc6a 	bl	80037d0 <_init>
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	2600      	movs	r6, #0
 8002f02:	42a6      	cmp	r6, r4
 8002f04:	d105      	bne.n	8002f12 <__libc_init_array+0x2e>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0c:	4798      	blx	r3
 8002f0e:	3601      	adds	r6, #1
 8002f10:	e7ee      	b.n	8002ef0 <__libc_init_array+0xc>
 8002f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f16:	4798      	blx	r3
 8002f18:	3601      	adds	r6, #1
 8002f1a:	e7f2      	b.n	8002f02 <__libc_init_array+0x1e>
 8002f1c:	08003850 	.word	0x08003850
 8002f20:	08003850 	.word	0x08003850
 8002f24:	08003850 	.word	0x08003850
 8002f28:	08003854 	.word	0x08003854

08002f2c <__retarget_lock_acquire_recursive>:
 8002f2c:	4770      	bx	lr

08002f2e <__retarget_lock_release_recursive>:
 8002f2e:	4770      	bx	lr

08002f30 <_free_r>:
 8002f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d044      	beq.n	8002fc0 <_free_r+0x90>
 8002f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f3a:	9001      	str	r0, [sp, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8002f42:	bfb8      	it	lt
 8002f44:	18e4      	addlt	r4, r4, r3
 8002f46:	f000 f8df 	bl	8003108 <__malloc_lock>
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <_free_r+0x94>)
 8002f4c:	9801      	ldr	r0, [sp, #4]
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	b933      	cbnz	r3, 8002f60 <_free_r+0x30>
 8002f52:	6063      	str	r3, [r4, #4]
 8002f54:	6014      	str	r4, [r2, #0]
 8002f56:	b003      	add	sp, #12
 8002f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f5c:	f000 b8da 	b.w	8003114 <__malloc_unlock>
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d908      	bls.n	8002f76 <_free_r+0x46>
 8002f64:	6825      	ldr	r5, [r4, #0]
 8002f66:	1961      	adds	r1, r4, r5
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	bf01      	itttt	eq
 8002f6c:	6819      	ldreq	r1, [r3, #0]
 8002f6e:	685b      	ldreq	r3, [r3, #4]
 8002f70:	1949      	addeq	r1, r1, r5
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	e7ed      	b.n	8002f52 <_free_r+0x22>
 8002f76:	461a      	mov	r2, r3
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b10b      	cbz	r3, 8002f80 <_free_r+0x50>
 8002f7c:	42a3      	cmp	r3, r4
 8002f7e:	d9fa      	bls.n	8002f76 <_free_r+0x46>
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	1855      	adds	r5, r2, r1
 8002f84:	42a5      	cmp	r5, r4
 8002f86:	d10b      	bne.n	8002fa0 <_free_r+0x70>
 8002f88:	6824      	ldr	r4, [r4, #0]
 8002f8a:	4421      	add	r1, r4
 8002f8c:	1854      	adds	r4, r2, r1
 8002f8e:	42a3      	cmp	r3, r4
 8002f90:	6011      	str	r1, [r2, #0]
 8002f92:	d1e0      	bne.n	8002f56 <_free_r+0x26>
 8002f94:	681c      	ldr	r4, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	6053      	str	r3, [r2, #4]
 8002f9a:	440c      	add	r4, r1
 8002f9c:	6014      	str	r4, [r2, #0]
 8002f9e:	e7da      	b.n	8002f56 <_free_r+0x26>
 8002fa0:	d902      	bls.n	8002fa8 <_free_r+0x78>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	6003      	str	r3, [r0, #0]
 8002fa6:	e7d6      	b.n	8002f56 <_free_r+0x26>
 8002fa8:	6825      	ldr	r5, [r4, #0]
 8002faa:	1961      	adds	r1, r4, r5
 8002fac:	428b      	cmp	r3, r1
 8002fae:	bf04      	itt	eq
 8002fb0:	6819      	ldreq	r1, [r3, #0]
 8002fb2:	685b      	ldreq	r3, [r3, #4]
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	bf04      	itt	eq
 8002fb8:	1949      	addeq	r1, r1, r5
 8002fba:	6021      	streq	r1, [r4, #0]
 8002fbc:	6054      	str	r4, [r2, #4]
 8002fbe:	e7ca      	b.n	8002f56 <_free_r+0x26>
 8002fc0:	b003      	add	sp, #12
 8002fc2:	bd30      	pop	{r4, r5, pc}
 8002fc4:	2000025c 	.word	0x2000025c

08002fc8 <sbrk_aligned>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	4e0e      	ldr	r6, [pc, #56]	; (8003004 <sbrk_aligned+0x3c>)
 8002fcc:	460c      	mov	r4, r1
 8002fce:	6831      	ldr	r1, [r6, #0]
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	b911      	cbnz	r1, 8002fda <sbrk_aligned+0x12>
 8002fd4:	f000 fba6 	bl	8003724 <_sbrk_r>
 8002fd8:	6030      	str	r0, [r6, #0]
 8002fda:	4621      	mov	r1, r4
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f000 fba1 	bl	8003724 <_sbrk_r>
 8002fe2:	1c43      	adds	r3, r0, #1
 8002fe4:	d00a      	beq.n	8002ffc <sbrk_aligned+0x34>
 8002fe6:	1cc4      	adds	r4, r0, #3
 8002fe8:	f024 0403 	bic.w	r4, r4, #3
 8002fec:	42a0      	cmp	r0, r4
 8002fee:	d007      	beq.n	8003000 <sbrk_aligned+0x38>
 8002ff0:	1a21      	subs	r1, r4, r0
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f000 fb96 	bl	8003724 <_sbrk_r>
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	d101      	bne.n	8003000 <sbrk_aligned+0x38>
 8002ffc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003000:	4620      	mov	r0, r4
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	20000260 	.word	0x20000260

08003008 <_malloc_r>:
 8003008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800300c:	1ccd      	adds	r5, r1, #3
 800300e:	f025 0503 	bic.w	r5, r5, #3
 8003012:	3508      	adds	r5, #8
 8003014:	2d0c      	cmp	r5, #12
 8003016:	bf38      	it	cc
 8003018:	250c      	movcc	r5, #12
 800301a:	2d00      	cmp	r5, #0
 800301c:	4607      	mov	r7, r0
 800301e:	db01      	blt.n	8003024 <_malloc_r+0x1c>
 8003020:	42a9      	cmp	r1, r5
 8003022:	d905      	bls.n	8003030 <_malloc_r+0x28>
 8003024:	230c      	movs	r3, #12
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	2600      	movs	r6, #0
 800302a:	4630      	mov	r0, r6
 800302c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003030:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003104 <_malloc_r+0xfc>
 8003034:	f000 f868 	bl	8003108 <__malloc_lock>
 8003038:	f8d8 3000 	ldr.w	r3, [r8]
 800303c:	461c      	mov	r4, r3
 800303e:	bb5c      	cbnz	r4, 8003098 <_malloc_r+0x90>
 8003040:	4629      	mov	r1, r5
 8003042:	4638      	mov	r0, r7
 8003044:	f7ff ffc0 	bl	8002fc8 <sbrk_aligned>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	4604      	mov	r4, r0
 800304c:	d155      	bne.n	80030fa <_malloc_r+0xf2>
 800304e:	f8d8 4000 	ldr.w	r4, [r8]
 8003052:	4626      	mov	r6, r4
 8003054:	2e00      	cmp	r6, #0
 8003056:	d145      	bne.n	80030e4 <_malloc_r+0xdc>
 8003058:	2c00      	cmp	r4, #0
 800305a:	d048      	beq.n	80030ee <_malloc_r+0xe6>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	4631      	mov	r1, r6
 8003060:	4638      	mov	r0, r7
 8003062:	eb04 0903 	add.w	r9, r4, r3
 8003066:	f000 fb5d 	bl	8003724 <_sbrk_r>
 800306a:	4581      	cmp	r9, r0
 800306c:	d13f      	bne.n	80030ee <_malloc_r+0xe6>
 800306e:	6821      	ldr	r1, [r4, #0]
 8003070:	1a6d      	subs	r5, r5, r1
 8003072:	4629      	mov	r1, r5
 8003074:	4638      	mov	r0, r7
 8003076:	f7ff ffa7 	bl	8002fc8 <sbrk_aligned>
 800307a:	3001      	adds	r0, #1
 800307c:	d037      	beq.n	80030ee <_malloc_r+0xe6>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	442b      	add	r3, r5
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	f8d8 3000 	ldr.w	r3, [r8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d038      	beq.n	80030fe <_malloc_r+0xf6>
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	42a2      	cmp	r2, r4
 8003090:	d12b      	bne.n	80030ea <_malloc_r+0xe2>
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	e00f      	b.n	80030b8 <_malloc_r+0xb0>
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	1b52      	subs	r2, r2, r5
 800309c:	d41f      	bmi.n	80030de <_malloc_r+0xd6>
 800309e:	2a0b      	cmp	r2, #11
 80030a0:	d917      	bls.n	80030d2 <_malloc_r+0xca>
 80030a2:	1961      	adds	r1, r4, r5
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	6025      	str	r5, [r4, #0]
 80030a8:	bf18      	it	ne
 80030aa:	6059      	strne	r1, [r3, #4]
 80030ac:	6863      	ldr	r3, [r4, #4]
 80030ae:	bf08      	it	eq
 80030b0:	f8c8 1000 	streq.w	r1, [r8]
 80030b4:	5162      	str	r2, [r4, r5]
 80030b6:	604b      	str	r3, [r1, #4]
 80030b8:	4638      	mov	r0, r7
 80030ba:	f104 060b 	add.w	r6, r4, #11
 80030be:	f000 f829 	bl	8003114 <__malloc_unlock>
 80030c2:	f026 0607 	bic.w	r6, r6, #7
 80030c6:	1d23      	adds	r3, r4, #4
 80030c8:	1af2      	subs	r2, r6, r3
 80030ca:	d0ae      	beq.n	800302a <_malloc_r+0x22>
 80030cc:	1b9b      	subs	r3, r3, r6
 80030ce:	50a3      	str	r3, [r4, r2]
 80030d0:	e7ab      	b.n	800302a <_malloc_r+0x22>
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	6862      	ldr	r2, [r4, #4]
 80030d6:	d1dd      	bne.n	8003094 <_malloc_r+0x8c>
 80030d8:	f8c8 2000 	str.w	r2, [r8]
 80030dc:	e7ec      	b.n	80030b8 <_malloc_r+0xb0>
 80030de:	4623      	mov	r3, r4
 80030e0:	6864      	ldr	r4, [r4, #4]
 80030e2:	e7ac      	b.n	800303e <_malloc_r+0x36>
 80030e4:	4634      	mov	r4, r6
 80030e6:	6876      	ldr	r6, [r6, #4]
 80030e8:	e7b4      	b.n	8003054 <_malloc_r+0x4c>
 80030ea:	4613      	mov	r3, r2
 80030ec:	e7cc      	b.n	8003088 <_malloc_r+0x80>
 80030ee:	230c      	movs	r3, #12
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4638      	mov	r0, r7
 80030f4:	f000 f80e 	bl	8003114 <__malloc_unlock>
 80030f8:	e797      	b.n	800302a <_malloc_r+0x22>
 80030fa:	6025      	str	r5, [r4, #0]
 80030fc:	e7dc      	b.n	80030b8 <_malloc_r+0xb0>
 80030fe:	605b      	str	r3, [r3, #4]
 8003100:	deff      	udf	#255	; 0xff
 8003102:	bf00      	nop
 8003104:	2000025c 	.word	0x2000025c

08003108 <__malloc_lock>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__malloc_lock+0x8>)
 800310a:	f7ff bf0f 	b.w	8002f2c <__retarget_lock_acquire_recursive>
 800310e:	bf00      	nop
 8003110:	20000258 	.word	0x20000258

08003114 <__malloc_unlock>:
 8003114:	4801      	ldr	r0, [pc, #4]	; (800311c <__malloc_unlock+0x8>)
 8003116:	f7ff bf0a 	b.w	8002f2e <__retarget_lock_release_recursive>
 800311a:	bf00      	nop
 800311c:	20000258 	.word	0x20000258

08003120 <__ssputs_r>:
 8003120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	688e      	ldr	r6, [r1, #8]
 8003126:	461f      	mov	r7, r3
 8003128:	42be      	cmp	r6, r7
 800312a:	680b      	ldr	r3, [r1, #0]
 800312c:	4682      	mov	sl, r0
 800312e:	460c      	mov	r4, r1
 8003130:	4690      	mov	r8, r2
 8003132:	d82c      	bhi.n	800318e <__ssputs_r+0x6e>
 8003134:	898a      	ldrh	r2, [r1, #12]
 8003136:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800313a:	d026      	beq.n	800318a <__ssputs_r+0x6a>
 800313c:	6965      	ldr	r5, [r4, #20]
 800313e:	6909      	ldr	r1, [r1, #16]
 8003140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003144:	eba3 0901 	sub.w	r9, r3, r1
 8003148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800314c:	1c7b      	adds	r3, r7, #1
 800314e:	444b      	add	r3, r9
 8003150:	106d      	asrs	r5, r5, #1
 8003152:	429d      	cmp	r5, r3
 8003154:	bf38      	it	cc
 8003156:	461d      	movcc	r5, r3
 8003158:	0553      	lsls	r3, r2, #21
 800315a:	d527      	bpl.n	80031ac <__ssputs_r+0x8c>
 800315c:	4629      	mov	r1, r5
 800315e:	f7ff ff53 	bl	8003008 <_malloc_r>
 8003162:	4606      	mov	r6, r0
 8003164:	b360      	cbz	r0, 80031c0 <__ssputs_r+0xa0>
 8003166:	6921      	ldr	r1, [r4, #16]
 8003168:	464a      	mov	r2, r9
 800316a:	f000 faeb 	bl	8003744 <memcpy>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003178:	81a3      	strh	r3, [r4, #12]
 800317a:	6126      	str	r6, [r4, #16]
 800317c:	6165      	str	r5, [r4, #20]
 800317e:	444e      	add	r6, r9
 8003180:	eba5 0509 	sub.w	r5, r5, r9
 8003184:	6026      	str	r6, [r4, #0]
 8003186:	60a5      	str	r5, [r4, #8]
 8003188:	463e      	mov	r6, r7
 800318a:	42be      	cmp	r6, r7
 800318c:	d900      	bls.n	8003190 <__ssputs_r+0x70>
 800318e:	463e      	mov	r6, r7
 8003190:	6820      	ldr	r0, [r4, #0]
 8003192:	4632      	mov	r2, r6
 8003194:	4641      	mov	r1, r8
 8003196:	f000 faab 	bl	80036f0 <memmove>
 800319a:	68a3      	ldr	r3, [r4, #8]
 800319c:	1b9b      	subs	r3, r3, r6
 800319e:	60a3      	str	r3, [r4, #8]
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	4433      	add	r3, r6
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	2000      	movs	r0, #0
 80031a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ac:	462a      	mov	r2, r5
 80031ae:	f000 fad7 	bl	8003760 <_realloc_r>
 80031b2:	4606      	mov	r6, r0
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d1e0      	bne.n	800317a <__ssputs_r+0x5a>
 80031b8:	6921      	ldr	r1, [r4, #16]
 80031ba:	4650      	mov	r0, sl
 80031bc:	f7ff feb8 	bl	8002f30 <_free_r>
 80031c0:	230c      	movs	r3, #12
 80031c2:	f8ca 3000 	str.w	r3, [sl]
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d2:	e7e9      	b.n	80031a8 <__ssputs_r+0x88>

080031d4 <_svfiprintf_r>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	4698      	mov	r8, r3
 80031da:	898b      	ldrh	r3, [r1, #12]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	b09d      	sub	sp, #116	; 0x74
 80031e0:	4607      	mov	r7, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	4614      	mov	r4, r2
 80031e6:	d50e      	bpl.n	8003206 <_svfiprintf_r+0x32>
 80031e8:	690b      	ldr	r3, [r1, #16]
 80031ea:	b963      	cbnz	r3, 8003206 <_svfiprintf_r+0x32>
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	f7ff ff0b 	bl	8003008 <_malloc_r>
 80031f2:	6028      	str	r0, [r5, #0]
 80031f4:	6128      	str	r0, [r5, #16]
 80031f6:	b920      	cbnz	r0, 8003202 <_svfiprintf_r+0x2e>
 80031f8:	230c      	movs	r3, #12
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003200:	e0d0      	b.n	80033a4 <_svfiprintf_r+0x1d0>
 8003202:	2340      	movs	r3, #64	; 0x40
 8003204:	616b      	str	r3, [r5, #20]
 8003206:	2300      	movs	r3, #0
 8003208:	9309      	str	r3, [sp, #36]	; 0x24
 800320a:	2320      	movs	r3, #32
 800320c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003210:	f8cd 800c 	str.w	r8, [sp, #12]
 8003214:	2330      	movs	r3, #48	; 0x30
 8003216:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033bc <_svfiprintf_r+0x1e8>
 800321a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800321e:	f04f 0901 	mov.w	r9, #1
 8003222:	4623      	mov	r3, r4
 8003224:	469a      	mov	sl, r3
 8003226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800322a:	b10a      	cbz	r2, 8003230 <_svfiprintf_r+0x5c>
 800322c:	2a25      	cmp	r2, #37	; 0x25
 800322e:	d1f9      	bne.n	8003224 <_svfiprintf_r+0x50>
 8003230:	ebba 0b04 	subs.w	fp, sl, r4
 8003234:	d00b      	beq.n	800324e <_svfiprintf_r+0x7a>
 8003236:	465b      	mov	r3, fp
 8003238:	4622      	mov	r2, r4
 800323a:	4629      	mov	r1, r5
 800323c:	4638      	mov	r0, r7
 800323e:	f7ff ff6f 	bl	8003120 <__ssputs_r>
 8003242:	3001      	adds	r0, #1
 8003244:	f000 80a9 	beq.w	800339a <_svfiprintf_r+0x1c6>
 8003248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800324a:	445a      	add	r2, fp
 800324c:	9209      	str	r2, [sp, #36]	; 0x24
 800324e:	f89a 3000 	ldrb.w	r3, [sl]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a1 	beq.w	800339a <_svfiprintf_r+0x1c6>
 8003258:	2300      	movs	r3, #0
 800325a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800325e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003262:	f10a 0a01 	add.w	sl, sl, #1
 8003266:	9304      	str	r3, [sp, #16]
 8003268:	9307      	str	r3, [sp, #28]
 800326a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800326e:	931a      	str	r3, [sp, #104]	; 0x68
 8003270:	4654      	mov	r4, sl
 8003272:	2205      	movs	r2, #5
 8003274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003278:	4850      	ldr	r0, [pc, #320]	; (80033bc <_svfiprintf_r+0x1e8>)
 800327a:	f7fc ffb1 	bl	80001e0 <memchr>
 800327e:	9a04      	ldr	r2, [sp, #16]
 8003280:	b9d8      	cbnz	r0, 80032ba <_svfiprintf_r+0xe6>
 8003282:	06d0      	lsls	r0, r2, #27
 8003284:	bf44      	itt	mi
 8003286:	2320      	movmi	r3, #32
 8003288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800328c:	0711      	lsls	r1, r2, #28
 800328e:	bf44      	itt	mi
 8003290:	232b      	movmi	r3, #43	; 0x2b
 8003292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003296:	f89a 3000 	ldrb.w	r3, [sl]
 800329a:	2b2a      	cmp	r3, #42	; 0x2a
 800329c:	d015      	beq.n	80032ca <_svfiprintf_r+0xf6>
 800329e:	9a07      	ldr	r2, [sp, #28]
 80032a0:	4654      	mov	r4, sl
 80032a2:	2000      	movs	r0, #0
 80032a4:	f04f 0c0a 	mov.w	ip, #10
 80032a8:	4621      	mov	r1, r4
 80032aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ae:	3b30      	subs	r3, #48	; 0x30
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d94d      	bls.n	8003350 <_svfiprintf_r+0x17c>
 80032b4:	b1b0      	cbz	r0, 80032e4 <_svfiprintf_r+0x110>
 80032b6:	9207      	str	r2, [sp, #28]
 80032b8:	e014      	b.n	80032e4 <_svfiprintf_r+0x110>
 80032ba:	eba0 0308 	sub.w	r3, r0, r8
 80032be:	fa09 f303 	lsl.w	r3, r9, r3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	9304      	str	r3, [sp, #16]
 80032c6:	46a2      	mov	sl, r4
 80032c8:	e7d2      	b.n	8003270 <_svfiprintf_r+0x9c>
 80032ca:	9b03      	ldr	r3, [sp, #12]
 80032cc:	1d19      	adds	r1, r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	9103      	str	r1, [sp, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bfbb      	ittet	lt
 80032d6:	425b      	neglt	r3, r3
 80032d8:	f042 0202 	orrlt.w	r2, r2, #2
 80032dc:	9307      	strge	r3, [sp, #28]
 80032de:	9307      	strlt	r3, [sp, #28]
 80032e0:	bfb8      	it	lt
 80032e2:	9204      	strlt	r2, [sp, #16]
 80032e4:	7823      	ldrb	r3, [r4, #0]
 80032e6:	2b2e      	cmp	r3, #46	; 0x2e
 80032e8:	d10c      	bne.n	8003304 <_svfiprintf_r+0x130>
 80032ea:	7863      	ldrb	r3, [r4, #1]
 80032ec:	2b2a      	cmp	r3, #42	; 0x2a
 80032ee:	d134      	bne.n	800335a <_svfiprintf_r+0x186>
 80032f0:	9b03      	ldr	r3, [sp, #12]
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	9203      	str	r2, [sp, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bfb8      	it	lt
 80032fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003300:	3402      	adds	r4, #2
 8003302:	9305      	str	r3, [sp, #20]
 8003304:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80033cc <_svfiprintf_r+0x1f8>
 8003308:	7821      	ldrb	r1, [r4, #0]
 800330a:	2203      	movs	r2, #3
 800330c:	4650      	mov	r0, sl
 800330e:	f7fc ff67 	bl	80001e0 <memchr>
 8003312:	b138      	cbz	r0, 8003324 <_svfiprintf_r+0x150>
 8003314:	9b04      	ldr	r3, [sp, #16]
 8003316:	eba0 000a 	sub.w	r0, r0, sl
 800331a:	2240      	movs	r2, #64	; 0x40
 800331c:	4082      	lsls	r2, r0
 800331e:	4313      	orrs	r3, r2
 8003320:	3401      	adds	r4, #1
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003328:	4825      	ldr	r0, [pc, #148]	; (80033c0 <_svfiprintf_r+0x1ec>)
 800332a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800332e:	2206      	movs	r2, #6
 8003330:	f7fc ff56 	bl	80001e0 <memchr>
 8003334:	2800      	cmp	r0, #0
 8003336:	d038      	beq.n	80033aa <_svfiprintf_r+0x1d6>
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <_svfiprintf_r+0x1f0>)
 800333a:	bb1b      	cbnz	r3, 8003384 <_svfiprintf_r+0x1b0>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	3307      	adds	r3, #7
 8003340:	f023 0307 	bic.w	r3, r3, #7
 8003344:	3308      	adds	r3, #8
 8003346:	9303      	str	r3, [sp, #12]
 8003348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800334a:	4433      	add	r3, r6
 800334c:	9309      	str	r3, [sp, #36]	; 0x24
 800334e:	e768      	b.n	8003222 <_svfiprintf_r+0x4e>
 8003350:	fb0c 3202 	mla	r2, ip, r2, r3
 8003354:	460c      	mov	r4, r1
 8003356:	2001      	movs	r0, #1
 8003358:	e7a6      	b.n	80032a8 <_svfiprintf_r+0xd4>
 800335a:	2300      	movs	r3, #0
 800335c:	3401      	adds	r4, #1
 800335e:	9305      	str	r3, [sp, #20]
 8003360:	4619      	mov	r1, r3
 8003362:	f04f 0c0a 	mov.w	ip, #10
 8003366:	4620      	mov	r0, r4
 8003368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800336c:	3a30      	subs	r2, #48	; 0x30
 800336e:	2a09      	cmp	r2, #9
 8003370:	d903      	bls.n	800337a <_svfiprintf_r+0x1a6>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0c6      	beq.n	8003304 <_svfiprintf_r+0x130>
 8003376:	9105      	str	r1, [sp, #20]
 8003378:	e7c4      	b.n	8003304 <_svfiprintf_r+0x130>
 800337a:	fb0c 2101 	mla	r1, ip, r1, r2
 800337e:	4604      	mov	r4, r0
 8003380:	2301      	movs	r3, #1
 8003382:	e7f0      	b.n	8003366 <_svfiprintf_r+0x192>
 8003384:	ab03      	add	r3, sp, #12
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	462a      	mov	r2, r5
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <_svfiprintf_r+0x1f4>)
 800338c:	a904      	add	r1, sp, #16
 800338e:	4638      	mov	r0, r7
 8003390:	f3af 8000 	nop.w
 8003394:	1c42      	adds	r2, r0, #1
 8003396:	4606      	mov	r6, r0
 8003398:	d1d6      	bne.n	8003348 <_svfiprintf_r+0x174>
 800339a:	89ab      	ldrh	r3, [r5, #12]
 800339c:	065b      	lsls	r3, r3, #25
 800339e:	f53f af2d 	bmi.w	80031fc <_svfiprintf_r+0x28>
 80033a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033a4:	b01d      	add	sp, #116	; 0x74
 80033a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033aa:	ab03      	add	r3, sp, #12
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	462a      	mov	r2, r5
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <_svfiprintf_r+0x1f4>)
 80033b2:	a904      	add	r1, sp, #16
 80033b4:	4638      	mov	r0, r7
 80033b6:	f000 f879 	bl	80034ac <_printf_i>
 80033ba:	e7eb      	b.n	8003394 <_svfiprintf_r+0x1c0>
 80033bc:	08003814 	.word	0x08003814
 80033c0:	0800381e 	.word	0x0800381e
 80033c4:	00000000 	.word	0x00000000
 80033c8:	08003121 	.word	0x08003121
 80033cc:	0800381a 	.word	0x0800381a

080033d0 <_printf_common>:
 80033d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d4:	4616      	mov	r6, r2
 80033d6:	4699      	mov	r9, r3
 80033d8:	688a      	ldr	r2, [r1, #8]
 80033da:	690b      	ldr	r3, [r1, #16]
 80033dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033e0:	4293      	cmp	r3, r2
 80033e2:	bfb8      	it	lt
 80033e4:	4613      	movlt	r3, r2
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ec:	4607      	mov	r7, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	b10a      	cbz	r2, 80033f6 <_printf_common+0x26>
 80033f2:	3301      	adds	r3, #1
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	0699      	lsls	r1, r3, #26
 80033fa:	bf42      	ittt	mi
 80033fc:	6833      	ldrmi	r3, [r6, #0]
 80033fe:	3302      	addmi	r3, #2
 8003400:	6033      	strmi	r3, [r6, #0]
 8003402:	6825      	ldr	r5, [r4, #0]
 8003404:	f015 0506 	ands.w	r5, r5, #6
 8003408:	d106      	bne.n	8003418 <_printf_common+0x48>
 800340a:	f104 0a19 	add.w	sl, r4, #25
 800340e:	68e3      	ldr	r3, [r4, #12]
 8003410:	6832      	ldr	r2, [r6, #0]
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	42ab      	cmp	r3, r5
 8003416:	dc26      	bgt.n	8003466 <_printf_common+0x96>
 8003418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800341c:	1e13      	subs	r3, r2, #0
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	bf18      	it	ne
 8003422:	2301      	movne	r3, #1
 8003424:	0692      	lsls	r2, r2, #26
 8003426:	d42b      	bmi.n	8003480 <_printf_common+0xb0>
 8003428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800342c:	4649      	mov	r1, r9
 800342e:	4638      	mov	r0, r7
 8003430:	47c0      	blx	r8
 8003432:	3001      	adds	r0, #1
 8003434:	d01e      	beq.n	8003474 <_printf_common+0xa4>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	6922      	ldr	r2, [r4, #16]
 800343a:	f003 0306 	and.w	r3, r3, #6
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf02      	ittt	eq
 8003442:	68e5      	ldreq	r5, [r4, #12]
 8003444:	6833      	ldreq	r3, [r6, #0]
 8003446:	1aed      	subeq	r5, r5, r3
 8003448:	68a3      	ldr	r3, [r4, #8]
 800344a:	bf0c      	ite	eq
 800344c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003450:	2500      	movne	r5, #0
 8003452:	4293      	cmp	r3, r2
 8003454:	bfc4      	itt	gt
 8003456:	1a9b      	subgt	r3, r3, r2
 8003458:	18ed      	addgt	r5, r5, r3
 800345a:	2600      	movs	r6, #0
 800345c:	341a      	adds	r4, #26
 800345e:	42b5      	cmp	r5, r6
 8003460:	d11a      	bne.n	8003498 <_printf_common+0xc8>
 8003462:	2000      	movs	r0, #0
 8003464:	e008      	b.n	8003478 <_printf_common+0xa8>
 8003466:	2301      	movs	r3, #1
 8003468:	4652      	mov	r2, sl
 800346a:	4649      	mov	r1, r9
 800346c:	4638      	mov	r0, r7
 800346e:	47c0      	blx	r8
 8003470:	3001      	adds	r0, #1
 8003472:	d103      	bne.n	800347c <_printf_common+0xac>
 8003474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347c:	3501      	adds	r5, #1
 800347e:	e7c6      	b.n	800340e <_printf_common+0x3e>
 8003480:	18e1      	adds	r1, r4, r3
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	2030      	movs	r0, #48	; 0x30
 8003486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800348a:	4422      	add	r2, r4
 800348c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003494:	3302      	adds	r3, #2
 8003496:	e7c7      	b.n	8003428 <_printf_common+0x58>
 8003498:	2301      	movs	r3, #1
 800349a:	4622      	mov	r2, r4
 800349c:	4649      	mov	r1, r9
 800349e:	4638      	mov	r0, r7
 80034a0:	47c0      	blx	r8
 80034a2:	3001      	adds	r0, #1
 80034a4:	d0e6      	beq.n	8003474 <_printf_common+0xa4>
 80034a6:	3601      	adds	r6, #1
 80034a8:	e7d9      	b.n	800345e <_printf_common+0x8e>
	...

080034ac <_printf_i>:
 80034ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034b0:	7e0f      	ldrb	r7, [r1, #24]
 80034b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034b4:	2f78      	cmp	r7, #120	; 0x78
 80034b6:	4691      	mov	r9, r2
 80034b8:	4680      	mov	r8, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	469a      	mov	sl, r3
 80034be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034c2:	d807      	bhi.n	80034d4 <_printf_i+0x28>
 80034c4:	2f62      	cmp	r7, #98	; 0x62
 80034c6:	d80a      	bhi.n	80034de <_printf_i+0x32>
 80034c8:	2f00      	cmp	r7, #0
 80034ca:	f000 80d4 	beq.w	8003676 <_printf_i+0x1ca>
 80034ce:	2f58      	cmp	r7, #88	; 0x58
 80034d0:	f000 80c0 	beq.w	8003654 <_printf_i+0x1a8>
 80034d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034dc:	e03a      	b.n	8003554 <_printf_i+0xa8>
 80034de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034e2:	2b15      	cmp	r3, #21
 80034e4:	d8f6      	bhi.n	80034d4 <_printf_i+0x28>
 80034e6:	a101      	add	r1, pc, #4	; (adr r1, 80034ec <_printf_i+0x40>)
 80034e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034ec:	08003545 	.word	0x08003545
 80034f0:	08003559 	.word	0x08003559
 80034f4:	080034d5 	.word	0x080034d5
 80034f8:	080034d5 	.word	0x080034d5
 80034fc:	080034d5 	.word	0x080034d5
 8003500:	080034d5 	.word	0x080034d5
 8003504:	08003559 	.word	0x08003559
 8003508:	080034d5 	.word	0x080034d5
 800350c:	080034d5 	.word	0x080034d5
 8003510:	080034d5 	.word	0x080034d5
 8003514:	080034d5 	.word	0x080034d5
 8003518:	0800365d 	.word	0x0800365d
 800351c:	08003585 	.word	0x08003585
 8003520:	08003617 	.word	0x08003617
 8003524:	080034d5 	.word	0x080034d5
 8003528:	080034d5 	.word	0x080034d5
 800352c:	0800367f 	.word	0x0800367f
 8003530:	080034d5 	.word	0x080034d5
 8003534:	08003585 	.word	0x08003585
 8003538:	080034d5 	.word	0x080034d5
 800353c:	080034d5 	.word	0x080034d5
 8003540:	0800361f 	.word	0x0800361f
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	1d1a      	adds	r2, r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	602a      	str	r2, [r5, #0]
 800354c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003554:	2301      	movs	r3, #1
 8003556:	e09f      	b.n	8003698 <_printf_i+0x1ec>
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	682b      	ldr	r3, [r5, #0]
 800355c:	0607      	lsls	r7, r0, #24
 800355e:	f103 0104 	add.w	r1, r3, #4
 8003562:	6029      	str	r1, [r5, #0]
 8003564:	d501      	bpl.n	800356a <_printf_i+0xbe>
 8003566:	681e      	ldr	r6, [r3, #0]
 8003568:	e003      	b.n	8003572 <_printf_i+0xc6>
 800356a:	0646      	lsls	r6, r0, #25
 800356c:	d5fb      	bpl.n	8003566 <_printf_i+0xba>
 800356e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003572:	2e00      	cmp	r6, #0
 8003574:	da03      	bge.n	800357e <_printf_i+0xd2>
 8003576:	232d      	movs	r3, #45	; 0x2d
 8003578:	4276      	negs	r6, r6
 800357a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800357e:	485a      	ldr	r0, [pc, #360]	; (80036e8 <_printf_i+0x23c>)
 8003580:	230a      	movs	r3, #10
 8003582:	e012      	b.n	80035aa <_printf_i+0xfe>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	1d19      	adds	r1, r3, #4
 800358a:	6029      	str	r1, [r5, #0]
 800358c:	0605      	lsls	r5, r0, #24
 800358e:	d501      	bpl.n	8003594 <_printf_i+0xe8>
 8003590:	681e      	ldr	r6, [r3, #0]
 8003592:	e002      	b.n	800359a <_printf_i+0xee>
 8003594:	0641      	lsls	r1, r0, #25
 8003596:	d5fb      	bpl.n	8003590 <_printf_i+0xe4>
 8003598:	881e      	ldrh	r6, [r3, #0]
 800359a:	4853      	ldr	r0, [pc, #332]	; (80036e8 <_printf_i+0x23c>)
 800359c:	2f6f      	cmp	r7, #111	; 0x6f
 800359e:	bf0c      	ite	eq
 80035a0:	2308      	moveq	r3, #8
 80035a2:	230a      	movne	r3, #10
 80035a4:	2100      	movs	r1, #0
 80035a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035aa:	6865      	ldr	r5, [r4, #4]
 80035ac:	60a5      	str	r5, [r4, #8]
 80035ae:	2d00      	cmp	r5, #0
 80035b0:	bfa2      	ittt	ge
 80035b2:	6821      	ldrge	r1, [r4, #0]
 80035b4:	f021 0104 	bicge.w	r1, r1, #4
 80035b8:	6021      	strge	r1, [r4, #0]
 80035ba:	b90e      	cbnz	r6, 80035c0 <_printf_i+0x114>
 80035bc:	2d00      	cmp	r5, #0
 80035be:	d04b      	beq.n	8003658 <_printf_i+0x1ac>
 80035c0:	4615      	mov	r5, r2
 80035c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80035c6:	fb03 6711 	mls	r7, r3, r1, r6
 80035ca:	5dc7      	ldrb	r7, [r0, r7]
 80035cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035d0:	4637      	mov	r7, r6
 80035d2:	42bb      	cmp	r3, r7
 80035d4:	460e      	mov	r6, r1
 80035d6:	d9f4      	bls.n	80035c2 <_printf_i+0x116>
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d10b      	bne.n	80035f4 <_printf_i+0x148>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	07de      	lsls	r6, r3, #31
 80035e0:	d508      	bpl.n	80035f4 <_printf_i+0x148>
 80035e2:	6923      	ldr	r3, [r4, #16]
 80035e4:	6861      	ldr	r1, [r4, #4]
 80035e6:	4299      	cmp	r1, r3
 80035e8:	bfde      	ittt	le
 80035ea:	2330      	movle	r3, #48	; 0x30
 80035ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035f4:	1b52      	subs	r2, r2, r5
 80035f6:	6122      	str	r2, [r4, #16]
 80035f8:	f8cd a000 	str.w	sl, [sp]
 80035fc:	464b      	mov	r3, r9
 80035fe:	aa03      	add	r2, sp, #12
 8003600:	4621      	mov	r1, r4
 8003602:	4640      	mov	r0, r8
 8003604:	f7ff fee4 	bl	80033d0 <_printf_common>
 8003608:	3001      	adds	r0, #1
 800360a:	d14a      	bne.n	80036a2 <_printf_i+0x1f6>
 800360c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003610:	b004      	add	sp, #16
 8003612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	f043 0320 	orr.w	r3, r3, #32
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	4833      	ldr	r0, [pc, #204]	; (80036ec <_printf_i+0x240>)
 8003620:	2778      	movs	r7, #120	; 0x78
 8003622:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	6829      	ldr	r1, [r5, #0]
 800362a:	061f      	lsls	r7, r3, #24
 800362c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003630:	d402      	bmi.n	8003638 <_printf_i+0x18c>
 8003632:	065f      	lsls	r7, r3, #25
 8003634:	bf48      	it	mi
 8003636:	b2b6      	uxthmi	r6, r6
 8003638:	07df      	lsls	r7, r3, #31
 800363a:	bf48      	it	mi
 800363c:	f043 0320 	orrmi.w	r3, r3, #32
 8003640:	6029      	str	r1, [r5, #0]
 8003642:	bf48      	it	mi
 8003644:	6023      	strmi	r3, [r4, #0]
 8003646:	b91e      	cbnz	r6, 8003650 <_printf_i+0x1a4>
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	f023 0320 	bic.w	r3, r3, #32
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	2310      	movs	r3, #16
 8003652:	e7a7      	b.n	80035a4 <_printf_i+0xf8>
 8003654:	4824      	ldr	r0, [pc, #144]	; (80036e8 <_printf_i+0x23c>)
 8003656:	e7e4      	b.n	8003622 <_printf_i+0x176>
 8003658:	4615      	mov	r5, r2
 800365a:	e7bd      	b.n	80035d8 <_printf_i+0x12c>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	6826      	ldr	r6, [r4, #0]
 8003660:	6961      	ldr	r1, [r4, #20]
 8003662:	1d18      	adds	r0, r3, #4
 8003664:	6028      	str	r0, [r5, #0]
 8003666:	0635      	lsls	r5, r6, #24
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	d501      	bpl.n	8003670 <_printf_i+0x1c4>
 800366c:	6019      	str	r1, [r3, #0]
 800366e:	e002      	b.n	8003676 <_printf_i+0x1ca>
 8003670:	0670      	lsls	r0, r6, #25
 8003672:	d5fb      	bpl.n	800366c <_printf_i+0x1c0>
 8003674:	8019      	strh	r1, [r3, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	6123      	str	r3, [r4, #16]
 800367a:	4615      	mov	r5, r2
 800367c:	e7bc      	b.n	80035f8 <_printf_i+0x14c>
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	602a      	str	r2, [r5, #0]
 8003684:	681d      	ldr	r5, [r3, #0]
 8003686:	6862      	ldr	r2, [r4, #4]
 8003688:	2100      	movs	r1, #0
 800368a:	4628      	mov	r0, r5
 800368c:	f7fc fda8 	bl	80001e0 <memchr>
 8003690:	b108      	cbz	r0, 8003696 <_printf_i+0x1ea>
 8003692:	1b40      	subs	r0, r0, r5
 8003694:	6060      	str	r0, [r4, #4]
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	2300      	movs	r3, #0
 800369c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036a0:	e7aa      	b.n	80035f8 <_printf_i+0x14c>
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	462a      	mov	r2, r5
 80036a6:	4649      	mov	r1, r9
 80036a8:	4640      	mov	r0, r8
 80036aa:	47d0      	blx	sl
 80036ac:	3001      	adds	r0, #1
 80036ae:	d0ad      	beq.n	800360c <_printf_i+0x160>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	079b      	lsls	r3, r3, #30
 80036b4:	d413      	bmi.n	80036de <_printf_i+0x232>
 80036b6:	68e0      	ldr	r0, [r4, #12]
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	4298      	cmp	r0, r3
 80036bc:	bfb8      	it	lt
 80036be:	4618      	movlt	r0, r3
 80036c0:	e7a6      	b.n	8003610 <_printf_i+0x164>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4632      	mov	r2, r6
 80036c6:	4649      	mov	r1, r9
 80036c8:	4640      	mov	r0, r8
 80036ca:	47d0      	blx	sl
 80036cc:	3001      	adds	r0, #1
 80036ce:	d09d      	beq.n	800360c <_printf_i+0x160>
 80036d0:	3501      	adds	r5, #1
 80036d2:	68e3      	ldr	r3, [r4, #12]
 80036d4:	9903      	ldr	r1, [sp, #12]
 80036d6:	1a5b      	subs	r3, r3, r1
 80036d8:	42ab      	cmp	r3, r5
 80036da:	dcf2      	bgt.n	80036c2 <_printf_i+0x216>
 80036dc:	e7eb      	b.n	80036b6 <_printf_i+0x20a>
 80036de:	2500      	movs	r5, #0
 80036e0:	f104 0619 	add.w	r6, r4, #25
 80036e4:	e7f5      	b.n	80036d2 <_printf_i+0x226>
 80036e6:	bf00      	nop
 80036e8:	08003825 	.word	0x08003825
 80036ec:	08003836 	.word	0x08003836

080036f0 <memmove>:
 80036f0:	4288      	cmp	r0, r1
 80036f2:	b510      	push	{r4, lr}
 80036f4:	eb01 0402 	add.w	r4, r1, r2
 80036f8:	d902      	bls.n	8003700 <memmove+0x10>
 80036fa:	4284      	cmp	r4, r0
 80036fc:	4623      	mov	r3, r4
 80036fe:	d807      	bhi.n	8003710 <memmove+0x20>
 8003700:	1e43      	subs	r3, r0, #1
 8003702:	42a1      	cmp	r1, r4
 8003704:	d008      	beq.n	8003718 <memmove+0x28>
 8003706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800370a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800370e:	e7f8      	b.n	8003702 <memmove+0x12>
 8003710:	4402      	add	r2, r0
 8003712:	4601      	mov	r1, r0
 8003714:	428a      	cmp	r2, r1
 8003716:	d100      	bne.n	800371a <memmove+0x2a>
 8003718:	bd10      	pop	{r4, pc}
 800371a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800371e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003722:	e7f7      	b.n	8003714 <memmove+0x24>

08003724 <_sbrk_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4d06      	ldr	r5, [pc, #24]	; (8003740 <_sbrk_r+0x1c>)
 8003728:	2300      	movs	r3, #0
 800372a:	4604      	mov	r4, r0
 800372c:	4608      	mov	r0, r1
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	f7fd fa04 	bl	8000b3c <_sbrk>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_sbrk_r+0x1a>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_sbrk_r+0x1a>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	20000254 	.word	0x20000254

08003744 <memcpy>:
 8003744:	440a      	add	r2, r1
 8003746:	4291      	cmp	r1, r2
 8003748:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800374c:	d100      	bne.n	8003750 <memcpy+0xc>
 800374e:	4770      	bx	lr
 8003750:	b510      	push	{r4, lr}
 8003752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800375a:	4291      	cmp	r1, r2
 800375c:	d1f9      	bne.n	8003752 <memcpy+0xe>
 800375e:	bd10      	pop	{r4, pc}

08003760 <_realloc_r>:
 8003760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003764:	4680      	mov	r8, r0
 8003766:	4614      	mov	r4, r2
 8003768:	460e      	mov	r6, r1
 800376a:	b921      	cbnz	r1, 8003776 <_realloc_r+0x16>
 800376c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003770:	4611      	mov	r1, r2
 8003772:	f7ff bc49 	b.w	8003008 <_malloc_r>
 8003776:	b92a      	cbnz	r2, 8003784 <_realloc_r+0x24>
 8003778:	f7ff fbda 	bl	8002f30 <_free_r>
 800377c:	4625      	mov	r5, r4
 800377e:	4628      	mov	r0, r5
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	f000 f81b 	bl	80037be <_malloc_usable_size_r>
 8003788:	4284      	cmp	r4, r0
 800378a:	4607      	mov	r7, r0
 800378c:	d802      	bhi.n	8003794 <_realloc_r+0x34>
 800378e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003792:	d812      	bhi.n	80037ba <_realloc_r+0x5a>
 8003794:	4621      	mov	r1, r4
 8003796:	4640      	mov	r0, r8
 8003798:	f7ff fc36 	bl	8003008 <_malloc_r>
 800379c:	4605      	mov	r5, r0
 800379e:	2800      	cmp	r0, #0
 80037a0:	d0ed      	beq.n	800377e <_realloc_r+0x1e>
 80037a2:	42bc      	cmp	r4, r7
 80037a4:	4622      	mov	r2, r4
 80037a6:	4631      	mov	r1, r6
 80037a8:	bf28      	it	cs
 80037aa:	463a      	movcs	r2, r7
 80037ac:	f7ff ffca 	bl	8003744 <memcpy>
 80037b0:	4631      	mov	r1, r6
 80037b2:	4640      	mov	r0, r8
 80037b4:	f7ff fbbc 	bl	8002f30 <_free_r>
 80037b8:	e7e1      	b.n	800377e <_realloc_r+0x1e>
 80037ba:	4635      	mov	r5, r6
 80037bc:	e7df      	b.n	800377e <_realloc_r+0x1e>

080037be <_malloc_usable_size_r>:
 80037be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c2:	1f18      	subs	r0, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bfbc      	itt	lt
 80037c8:	580b      	ldrlt	r3, [r1, r0]
 80037ca:	18c0      	addlt	r0, r0, r3
 80037cc:	4770      	bx	lr
	...

080037d0 <_init>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	bf00      	nop
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr

080037dc <_fini>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr
