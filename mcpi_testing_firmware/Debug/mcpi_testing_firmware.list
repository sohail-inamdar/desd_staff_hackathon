
mcpi_testing_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eec  08003eec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef4  08003ef4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000240  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e08d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ebb  00000000  00000000  0002e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  00030018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a52  00000000  00000000  00030d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002245c  00000000  00000000  00031792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f01b  00000000  00000000  00053bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7554  00000000  00000000  00062c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cb4  00000000  00000000  0013a160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0013de14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e7c 	.word	0x08003e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003e7c 	.word	0x08003e7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb2e 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f80e 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f940 	bl	800080c <MX_GPIO_Init>
  MX_ADC1_Init();
 800058c:	f000 f874 	bl	8000678 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f912 	bl	80007b8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000594:	f000 f8c2 	bl	800071c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <main+0x24>)
 800059a:	f001 ffd7 	bl	800254c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x22>
 80005a0:	200000c0 	.word	0x200000c0

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ffde 	bl	8003574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000618:	2332      	movs	r3, #50	; 0x32
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f001 faa7 	bl	8001b7c <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f93c 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fd08 	bl	800206c <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f925 	bl	80008b0 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_ADC1_Init+0x98>)
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <MX_ADC1_Init+0x9c>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_ADC1_Init+0xa0>)
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d8:	f000 faf4 	bl	8000cc4 <HAL_ADC_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f8e5 	bl	80008b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0x98>)
 80006f8:	f000 fd6a 	bl	80011d0 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000702:	f000 f8d5 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_TIM2_Init+0x98>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12499;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000742:	f243 02d3 	movw	r2, #12499	; 0x30d3
 8000746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_TIM2_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000750:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000754:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM2_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000764:	f001 fea2 	bl	80024ac <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800076e:	f000 f89f 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000780:	f002 f85c 	bl	800283c <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800078a:	f000 f891 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_TIM2_Init+0x98>)
 800079c:	f002 fa78 	bl	8002c90 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007a6:	f000 f883 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000c0 	.word	0x200000c0

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f002 fade 	bl	8002db0 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f859 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000108 	.word	0x20000108
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_GPIO_Init+0x30>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <MX_GPIO_Init+0x30>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_GPIO_Init+0x30>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800084a:	f000 fab1 	bl	8000db0 <HAL_ADC_Start_IT>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000078 	.word	0x20000078

0800085c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	char str[16];
	uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 8000864:	480f      	ldr	r0, [pc, #60]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000866:	f000 fc91 	bl	800118c <HAL_ADC_GetValue>
 800086a:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x48>)
 800086e:	f000 fa6c 	bl	8000d4a <HAL_ADC_Stop>
	sprintf(str, "Adc: %lu\r\n", adcVal);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	490b      	ldr	r1, [pc, #44]	; (80008a8 <HAL_ADC_ConvCpltCallback+0x4c>)
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fe5a 	bl	8003534 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fca3 	bl	80001d0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f107 010c 	add.w	r1, r7, #12
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_ADC_ConvCpltCallback+0x50>)
 8000898:	f002 fad7 	bl	8002e4a <HAL_UART_Transmit>
}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000078 	.word	0x20000078
 80008a8:	08003e94 	.word	0x08003e94
 80008ac:	20000108 	.word	0x20000108

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 ff60 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <HAL_ADC_MspInit+0x8c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12f      	bne.n	800098e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_ADC_MspInit+0x90>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_ADC_MspInit+0x90>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_ADC_MspInit+0x90>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x90>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_ADC_MspInit+0x90>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x90>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	2303      	movs	r3, #3
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <HAL_ADC_MspInit+0x94>)
 800097a:	f000 ff63 	bl	8001844 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2012      	movs	r0, #18
 8000984:	f000 ff27 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000988:	2012      	movs	r0, #18
 800098a:	f000 ff40 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40012000 	.word	0x40012000
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d115      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_TIM_Base_MspInit+0x48>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_TIM_Base_MspInit+0x48>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_TIM_Base_MspInit+0x48>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	201c      	movs	r0, #28
 80009d8:	f000 fefd 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009dc:	201c      	movs	r0, #28
 80009de:	f000 ff16 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x8c>)
 8000a66:	f000 feed 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f8da 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <ADC_IRQHandler+0x10>)
 8000ada:	f000 fa47 	bl	8000f6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000078 	.word	0x20000078

08000ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM2_IRQHandler+0x10>)
 8000aee:	f001 fd9d 	bl	800262c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000c0 	.word	0x200000c0

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 fd2a 	bl	8003584 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20020000 	.word	0x20020000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	2000014c 	.word	0x2000014c
 8000b64:	200002a0 	.word	0x200002a0

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 fce9 	bl	8003590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fcdd 	bl	800057c <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bd0:	08003efc 	.word	0x08003efc
  ldr r2, =_sbss
 8000bd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd8:	2000029c 	.word	0x2000029c

08000bdc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <CAN1_RX0_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 fdd9 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe52 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fdf1 	bl	800182a <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 fdb9 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000150 	.word	0x20000150

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000150 	.word	0x20000150

08000cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e033      	b.n	8000d42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fe12 	bl	800090c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d118      	bne.n	8000d34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d0a:	f023 0302 	bic.w	r3, r3, #2
 8000d0e:	f043 0202 	orr.w	r2, r3, #2
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fb7c 	bl	8001414 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40
 8000d32:	e001      	b.n	8000d38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_ADC_Stop+0x16>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e021      	b.n	8000da4 <HAL_ADC_Stop+0x5a>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0201 	bic.w	r2, r2, #1
 8000d76:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <HAL_ADC_Start_IT+0x1a>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e0bd      	b.n	8000f46 <HAL_ADC_Start_IT+0x196>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d018      	beq.n	8000e12 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000df0:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <HAL_ADC_Start_IT+0x1a4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_ADC_Start_IT+0x1a8>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9a      	lsrs	r2, r3, #18
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e04:	e002      	b.n	8000e0c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f9      	bne.n	8000e06 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	f040 8085 	bne.w	8000f2c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e60:	d106      	bne.n	8000e70 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f023 0206 	bic.w	r2, r3, #6
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8000e6e:	e002      	b.n	8000e76 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <HAL_ADC_Start_IT+0x1ac>)
 8000e80:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e8a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d12a      	bne.n	8000f02 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <HAL_ADC_Start_IT+0x1b0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d015      	beq.n	8000ee2 <HAL_ADC_Start_IT+0x132>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <HAL_ADC_Start_IT+0x1b4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d105      	bne.n	8000ecc <HAL_ADC_Start_IT+0x11c>
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_ADC_Start_IT+0x1ac>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00a      	beq.n	8000ee2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <HAL_ADC_Start_IT+0x1b8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d136      	bne.n	8000f44 <HAL_ADC_Start_IT+0x194>
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_ADC_Start_IT+0x1ac>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d130      	bne.n	8000f44 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d129      	bne.n	8000f44 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e020      	b.n	8000f44 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <HAL_ADC_Start_IT+0x1b0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d11b      	bne.n	8000f44 <HAL_ADC_Start_IT+0x194>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d114      	bne.n	8000f44 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	e00b      	b.n	8000f44 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f043 0210 	orr.w	r2, r3, #16
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	40012300 	.word	0x40012300
 8000f60:	40012000 	.word	0x40012000
 8000f64:	40012100 	.word	0x40012100
 8000f68:	40012200 	.word	0x40012200

08000f6c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d049      	beq.n	8001036 <HAL_ADC_IRQHandler+0xca>
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d046      	beq.n	8001036 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d12b      	bne.n	8001026 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d127      	bne.n	8001026 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d119      	bne.n	8001026 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0220 	bic.w	r2, r2, #32
 8001000:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fc18 	bl	800085c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f06f 0212 	mvn.w	r2, #18
 8001034:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001044:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d057      	beq.n	80010fc <HAL_ADC_IRQHandler+0x190>
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d054      	beq.n	80010fc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d105      	bne.n	800106a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d139      	bne.n	80010ec <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001090:	2b00      	cmp	r3, #0
 8001092:	d12b      	bne.n	80010ec <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d124      	bne.n	80010ec <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11d      	bne.n	80010ec <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d119      	bne.n	80010ec <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f043 0201 	orr.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fa8d 	bl	800160c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f06f 020c 	mvn.w	r2, #12
 80010fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d017      	beq.n	8001142 <HAL_ADC_IRQHandler+0x1d6>
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d014      	beq.n	8001142 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10d      	bne.n	8001142 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f837 	bl	80011a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f06f 0201 	mvn.w	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001150:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d015      	beq.n	8001184 <HAL_ADC_IRQHandler+0x218>
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d012      	beq.n	8001184 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f043 0202 	orr.w	r2, r3, #2
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f06f 0220 	mvn.w	r2, #32
 8001172:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f820 	bl	80011ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0220 	mvn.w	r2, #32
 8001182:	601a      	str	r2, [r3, #0]
  }
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1c>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e105      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x228>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d925      	bls.n	8001248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68d9      	ldr	r1, [r3, #12]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	3b1e      	subs	r3, #30
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43da      	mvns	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	400a      	ands	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68d9      	ldr	r1, [r3, #12]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	4603      	mov	r3, r0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4403      	add	r3, r0
 800123a:	3b1e      	subs	r3, #30
 800123c:	409a      	lsls	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	e022      	b.n	800128e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	2207      	movs	r2, #7
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	400a      	ands	r2, r1
 800126a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	4603      	mov	r3, r0
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4403      	add	r3, r0
 8001284:	409a      	lsls	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b06      	cmp	r3, #6
 8001294:	d824      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b05      	subs	r3, #5
 80012a8:	221f      	movs	r2, #31
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	400a      	ands	r2, r1
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b05      	subs	r3, #5
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	e04c      	b.n	800137a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d824      	bhi.n	8001332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3b23      	subs	r3, #35	; 0x23
 80012fa:	221f      	movs	r2, #31
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b23      	subs	r3, #35	; 0x23
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
 8001330:	e023      	b.n	800137a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b41      	subs	r3, #65	; 0x41
 8001344:	221f      	movs	r2, #31
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	400a      	ands	r2, r1
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b41      	subs	r3, #65	; 0x41
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_ADC_ConfigChannel+0x234>)
 800137c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <HAL_ADC_ConfigChannel+0x238>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d109      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1cc>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d105      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_ADC_ConfigChannel+0x238>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d123      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x21e>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x1e6>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	d11b      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b10      	cmp	r3, #16
 80013c8:	d111      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_ADC_ConfigChannel+0x23c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_ADC_ConfigChannel+0x240>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9a      	lsrs	r2, r3, #18
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40012300 	.word	0x40012300
 8001408:	40012000 	.word	0x40012000
 800140c:	20000000 	.word	0x20000000
 8001410:	431bde83 	.word	0x431bde83

08001414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800141c:	4b79      	ldr	r3, [pc, #484]	; (8001604 <ADC_Init+0x1f0>)
 800141e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	431a      	orrs	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	021a      	lsls	r2, r3, #8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800146c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6899      	ldr	r1, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	4a58      	ldr	r2, [pc, #352]	; (8001608 <ADC_Init+0x1f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d022      	beq.n	80014f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6899      	ldr	r1, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	e00f      	b.n	8001512 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001510:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0202 	bic.w	r2, r2, #2
 8001520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6899      	ldr	r1, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e1b      	ldrb	r3, [r3, #24]
 800152c:	005a      	lsls	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01b      	beq.n	8001578 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800154e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800155e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	3b01      	subs	r3, #1
 800156c:	035a      	lsls	r2, r3, #13
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	e007      	b.n	8001588 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001586:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	051a      	lsls	r2, r3, #20
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6899      	ldr	r1, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ca:	025a      	lsls	r2, r3, #9
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	029a      	lsls	r2, r3, #10
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40012300 	.word	0x40012300
 8001608:	0f000001 	.word	0x0f000001

0800160c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e16b      	b.n	8001b38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 815a 	bne.w	8001b32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80b4 	beq.w	8001b32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b60      	ldr	r3, [pc, #384]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a5f      	ldr	r2, [pc, #380]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a5b      	ldr	r2, [pc, #364]	; (8001b54 <HAL_GPIO_Init+0x310>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_GPIO_Init+0x314>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d02b      	beq.n	8001a6a <HAL_GPIO_Init+0x226>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a51      	ldr	r2, [pc, #324]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d025      	beq.n	8001a66 <HAL_GPIO_Init+0x222>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_GPIO_Init+0x31c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01f      	beq.n	8001a62 <HAL_GPIO_Init+0x21e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4f      	ldr	r2, [pc, #316]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x21a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4e      	ldr	r2, [pc, #312]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x216>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4d      	ldr	r2, [pc, #308]	; (8001b6c <HAL_GPIO_Init+0x328>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <HAL_GPIO_Init+0x32c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4b      	ldr	r2, [pc, #300]	; (8001b74 <HAL_GPIO_Init+0x330>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x20a>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00e      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a4e:	2308      	movs	r3, #8
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7c:	4935      	ldr	r1, [pc, #212]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <HAL_GPIO_Init+0x334>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f ae90 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40013800 	.word	0x40013800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021400 	.word	0x40021400
 8001b70:	40021800 	.word	0x40021800
 8001b74:	40021c00 	.word	0x40021c00
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e267      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d075      	beq.n	8001c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d00c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b85      	ldr	r3, [pc, #532]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb2:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d05b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x108>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d157      	bne.n	8001c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e242      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x74>
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a75      	ldr	r2, [pc, #468]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b70      	ldr	r3, [pc, #448]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6f      	ldr	r2, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6c      	ldr	r2, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001c14:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a68      	ldr	r2, [pc, #416]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f83a 	bl	8000cac <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f836 	bl	8000cac <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e207      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xc0>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f826 	bl	8000cac <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f822 	bl	8000cac <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1f3      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0xe8>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x152>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1c7      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x244>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7fe ffdb 	bl	8000cac <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7fe ffd7 	bl	8000cac <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1a8      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4925      	ldr	r1, [pc, #148]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_OscConfig+0x244>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe ffba 	bl	8000cac <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7fe ffb6 	bl	8000cac <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e187      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d036      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d016      	beq.n	8001d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_RCC_OscConfig+0x248>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe ff9a 	bl	8000cac <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe ff96 	bl	8000cac <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e167      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x200>
 8001d9a:	e01b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_OscConfig+0x248>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7fe ff83 	bl	8000cac <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	e00e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001daa:	f7fe ff7f 	bl	8000cac <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e150      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ea      	bne.n	8001daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8097 	beq.w	8001f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a7c      	ldr	r2, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a73      	ldr	r2, [pc, #460]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7fe ff3f 	bl	8000cac <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7fe ff3b 	bl	8000cac <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e10c      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2ea>
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a63      	ldr	r2, [pc, #396]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x324>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b05      	cmp	r3, #5
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x30c>
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a5b      	ldr	r2, [pc, #364]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x324>
 8001e88:	4b58      	ldr	r3, [pc, #352]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a57      	ldr	r2, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	4b55      	ldr	r3, [pc, #340]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a54      	ldr	r2, [pc, #336]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7fe ff00 	bl	8000cac <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fefc 	bl	8000cac <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0cb      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	4b49      	ldr	r3, [pc, #292]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0ee      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7fe feea 	bl	8000cac <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe fee6 	bl	8000cac <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0b5      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ee      	bne.n	8001edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a1 	beq.w	800205c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d05c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d141      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe feba 	bl	8000cac <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe feb6 	bl	8000cac <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e087      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	491b      	ldr	r1, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fe8f 	bl	8000cac <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f92:	f7fe fe8b 	bl	8000cac <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e05c      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x416>
 8001fb0:	e054      	b.n	800205c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe78 	bl	8000cac <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fe74 	bl	8000cac <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e045      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e038      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4ec>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d028      	beq.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d121      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d11a      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800202e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	3b01      	subs	r3, #1
 8002042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0cc      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b68      	ldr	r3, [pc, #416]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d90c      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0b8      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	494d      	ldr	r1, [pc, #308]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d044      	beq.n	800218c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d119      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d003      	beq.n	800212a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002126:	2b03      	cmp	r3, #3
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e067      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4934      	ldr	r1, [pc, #208]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7fe fda6 	bl	8000cac <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fda2 	bl	8000cac <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e04f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d20c      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e032      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4916      	ldr	r1, [pc, #88]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	490e      	ldr	r1, [pc, #56]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f2:	f000 f821 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	490a      	ldr	r1, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	fa22 f303 	lsr.w	r3, r2, r3
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fd06 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00
 8002228:	40023800 	.word	0x40023800
 800222c:	08003ea0 	.word	0x08003ea0
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b094      	sub	sp, #80	; 0x50
 800223e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	647b      	str	r3, [r7, #68]	; 0x44
 8002244:	2300      	movs	r3, #0
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002248:	2300      	movs	r3, #0
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002250:	4b79      	ldr	r3, [pc, #484]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d00d      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x40>
 800225c:	2b08      	cmp	r3, #8
 800225e:	f200 80e1 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x34>
 8002266:	2b04      	cmp	r3, #4
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x3a>
 800226a:	e0db      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_GetSysClockFreq+0x204>)
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002270:	e0db      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_GetSysClockFreq+0x208>)
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002276:	e0d8      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002282:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228e:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	099b      	lsrs	r3, r3, #6
 8002294:	2200      	movs	r2, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
 8002298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
 80022a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022bc:	0150      	lsls	r0, r2, #5
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4621      	mov	r1, r4
 80022c4:	1a51      	subs	r1, r2, r1
 80022c6:	6139      	str	r1, [r7, #16]
 80022c8:	4629      	mov	r1, r5
 80022ca:	eb63 0301 	sbc.w	r3, r3, r1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022dc:	4659      	mov	r1, fp
 80022de:	018b      	lsls	r3, r1, #6
 80022e0:	4651      	mov	r1, sl
 80022e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e6:	4651      	mov	r1, sl
 80022e8:	018a      	lsls	r2, r1, #6
 80022ea:	4651      	mov	r1, sl
 80022ec:	ebb2 0801 	subs.w	r8, r2, r1
 80022f0:	4659      	mov	r1, fp
 80022f2:	eb63 0901 	sbc.w	r9, r3, r1
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230a:	4690      	mov	r8, r2
 800230c:	4699      	mov	r9, r3
 800230e:	4623      	mov	r3, r4
 8002310:	eb18 0303 	adds.w	r3, r8, r3
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	462b      	mov	r3, r5
 8002318:	eb49 0303 	adc.w	r3, r9, r3
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800232a:	4629      	mov	r1, r5
 800232c:	024b      	lsls	r3, r1, #9
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002334:	4621      	mov	r1, r4
 8002336:	024a      	lsls	r2, r1, #9
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
 8002342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002348:	f7fd ff9a 	bl	8000280 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002354:	e058      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	4618      	mov	r0, r3
 8002360:	4611      	mov	r1, r2
 8002362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002370:	4642      	mov	r2, r8
 8002372:	464b      	mov	r3, r9
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	0159      	lsls	r1, r3, #5
 800237e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002382:	0150      	lsls	r0, r2, #5
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4641      	mov	r1, r8
 800238a:	ebb2 0a01 	subs.w	sl, r2, r1
 800238e:	4649      	mov	r1, r9
 8002390:	eb63 0b01 	sbc.w	fp, r3, r1
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a8:	ebb2 040a 	subs.w	r4, r2, sl
 80023ac:	eb63 050b 	sbc.w	r5, r3, fp
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	00eb      	lsls	r3, r5, #3
 80023ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023be:	00e2      	lsls	r2, r4, #3
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	18e3      	adds	r3, r4, r3
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	464b      	mov	r3, r9
 80023cc:	eb45 0303 	adc.w	r3, r5, r3
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023de:	4629      	mov	r1, r5
 80023e0:	028b      	lsls	r3, r1, #10
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e8:	4621      	mov	r1, r4
 80023ea:	028a      	lsls	r2, r1, #10
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f2:	2200      	movs	r2, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	61fa      	str	r2, [r7, #28]
 80023f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fc:	f7fd ff40 	bl	8000280 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetSysClockFreq+0x204>)
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800242c:	4618      	mov	r0, r3
 800242e:	3750      	adds	r7, #80	; 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08003eb0 	.word	0x08003eb0

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002488:	f7ff ffdc 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0b5b      	lsrs	r3, r3, #13
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4903      	ldr	r1, [pc, #12]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08003eb0 	.word	0x08003eb0

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fa66 	bl	80009a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 fa96 	bl	8002a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e04e      	b.n	8002602 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_TIM_Base_Start_IT+0xc4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d01d      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_TIM_Base_Start_IT+0xc8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_TIM_Base_Start_IT+0xcc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_TIM_Base_Start_IT+0xd0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_TIM_Base_Start_IT+0xd4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_TIM_Base_Start_IT+0xd8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_Base_Start_IT+0xdc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d010      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	e007      	b.n	8002600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40010000 	.word	0x40010000
 8002614:	40000400 	.word	0x40000400
 8002618:	40000800 	.word	0x40000800
 800261c:	40000c00 	.word	0x40000c00
 8002620:	40010400 	.word	0x40010400
 8002624:	40014000 	.word	0x40014000
 8002628:	40001800 	.word	0x40001800

0800262c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b02      	cmp	r3, #2
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0202 	mvn.w	r2, #2
 8002658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f9b5 	bl	80029de <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f9a7 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f9b8 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0204 	mvn.w	r2, #4
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f98b 	bl	80029de <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f97d 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f98e 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0208 	mvn.w	r2, #8
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2204      	movs	r2, #4
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f961 	bl	80029de <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f953 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f964 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b10      	cmp	r3, #16
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b10      	cmp	r3, #16
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2208      	movs	r2, #8
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f937 	bl	80029de <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f929 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f93a 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0201 	mvn.w	r2, #1
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f848 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fae0 	bl	8002d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8ff 	bl	8002a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b20      	cmp	r3, #32
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b20      	cmp	r3, #32
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0220 	mvn.w	r2, #32
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 faaa 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIM_ConfigClockSource+0x1c>
 8002854:	2302      	movs	r3, #2
 8002856:	e0b4      	b.n	80029c2 <HAL_TIM_ConfigClockSource+0x186>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d03e      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0xd4>
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	f200 8087 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	f000 8086 	beq.w	80029ae <HAL_TIM_ConfigClockSource+0x172>
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	d87f      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d01a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xa6>
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d87b      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d050      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x11a>
 80028b4:	2b60      	cmp	r3, #96	; 0x60
 80028b6:	d877      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d03c      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0xfa>
 80028bc:	2b50      	cmp	r3, #80	; 0x50
 80028be:	d873      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d058      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x13a>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d86f      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d064      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b30      	cmp	r3, #48	; 0x30
 80028ce:	d86b      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d060      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d867      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05c      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d05a      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	e062      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f000 f9ad 	bl	8002c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	609a      	str	r2, [r3, #8]
      break;
 800290e:	e04f      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6899      	ldr	r1, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f000 f996 	bl	8002c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002932:	609a      	str	r2, [r3, #8]
      break;
 8002934:	e03c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f90a 	bl	8002b5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2150      	movs	r1, #80	; 0x50
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f963 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 8002954:	e02c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 f929 	bl	8002bba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2160      	movs	r1, #96	; 0x60
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f953 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 8002974:	e01c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 f8ea 	bl	8002b5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2140      	movs	r1, #64	; 0x40
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f943 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 8002994:	e00c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f000 f93a 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 80029a6:	e003      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e000      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <TIM_Base_SetConfig+0x114>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d00f      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <TIM_Base_SetConfig+0x118>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <TIM_Base_SetConfig+0x11c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3b      	ldr	r2, [pc, #236]	; (8002b3c <TIM_Base_SetConfig+0x120>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3a      	ldr	r2, [pc, #232]	; (8002b40 <TIM_Base_SetConfig+0x124>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <TIM_Base_SetConfig+0x114>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02b      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d027      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <TIM_Base_SetConfig+0x118>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d023      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <TIM_Base_SetConfig+0x11c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01f      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <TIM_Base_SetConfig+0x120>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01b      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <TIM_Base_SetConfig+0x124>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d017      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <TIM_Base_SetConfig+0x128>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <TIM_Base_SetConfig+0x12c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00f      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <TIM_Base_SetConfig+0x130>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <TIM_Base_SetConfig+0x134>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <TIM_Base_SetConfig+0x138>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <TIM_Base_SetConfig+0x13c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <TIM_Base_SetConfig+0x114>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0xf8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <TIM_Base_SetConfig+0x124>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d103      	bne.n	8002b1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	615a      	str	r2, [r3, #20]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40010400 	.word	0x40010400
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800
 8002b50:	40001800 	.word	0x40001800
 8002b54:	40001c00 	.word	0x40001c00
 8002b58:	40002000 	.word	0x40002000

08002b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f023 0201 	bic.w	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f023 030a 	bic.w	r3, r3, #10
 8002b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0210 	bic.w	r2, r3, #16
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	031b      	lsls	r3, r3, #12
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f043 0307 	orr.w	r3, r3, #7
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	609a      	str	r2, [r3, #8]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e05a      	b.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d01d      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d018      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10c      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40010400 	.word	0x40010400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40001800 	.word	0x40001800

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e03f      	b.n	8002e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fe0a 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f929 	bl	800304c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	; 0x28
 8002e4e:	af02      	add	r7, sp, #8
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d17c      	bne.n	8002f64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_UART_Transmit+0x2c>
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e075      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Transmit+0x3e>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e06e      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2221      	movs	r2, #33	; 0x21
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9e:	f7fd ff05 	bl	8000cac <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb8:	d108      	bne.n	8002ecc <HAL_UART_Transmit+0x82>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e003      	b.n	8002ed4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002edc:	e02a      	b.n	8002f34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f840 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e036      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	3302      	adds	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e007      	b.n	8002f26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1cf      	bne.n	8002ede <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f810 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e006      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b090      	sub	sp, #64	; 0x40
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7e:	e050      	b.n	8003022 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f86:	d04c      	beq.n	8003022 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	f7fd fe8d 	bl	8000cac <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d241      	bcs.n	8003022 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fbe:	637a      	str	r2, [r7, #52]	; 0x34
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3314      	adds	r3, #20
 8002fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff2:	623a      	str	r2, [r7, #32]
 8002ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e00f      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	429a      	cmp	r2, r3
 800303e:	d09f      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3740      	adds	r7, #64	; 0x40
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b0c0      	sub	sp, #256	; 0x100
 8003052:	af00      	add	r7, sp, #0
 8003054:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	68d9      	ldr	r1, [r3, #12]
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	ea40 0301 	orr.w	r3, r0, r1
 8003074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030a4:	f021 010c 	bic.w	r1, r1, #12
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030b2:	430b      	orrs	r3, r1
 80030b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	6999      	ldr	r1, [r3, #24]
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	ea40 0301 	orr.w	r3, r0, r1
 80030d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <UART_SetConfig+0x2cc>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d005      	beq.n	80030ec <UART_SetConfig+0xa0>
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b8d      	ldr	r3, [pc, #564]	; (800331c <UART_SetConfig+0x2d0>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d104      	bne.n	80030f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7ff f9ca 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80030f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030f4:	e003      	b.n	80030fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030f6:	f7ff f9b1 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80030fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003108:	f040 810c 	bne.w	8003324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800310c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003116:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800311a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800311e:	4622      	mov	r2, r4
 8003120:	462b      	mov	r3, r5
 8003122:	1891      	adds	r1, r2, r2
 8003124:	65b9      	str	r1, [r7, #88]	; 0x58
 8003126:	415b      	adcs	r3, r3
 8003128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800312e:	4621      	mov	r1, r4
 8003130:	eb12 0801 	adds.w	r8, r2, r1
 8003134:	4629      	mov	r1, r5
 8003136:	eb43 0901 	adc.w	r9, r3, r1
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314e:	4690      	mov	r8, r2
 8003150:	4699      	mov	r9, r3
 8003152:	4623      	mov	r3, r4
 8003154:	eb18 0303 	adds.w	r3, r8, r3
 8003158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800315c:	462b      	mov	r3, r5
 800315e:	eb49 0303 	adc.w	r3, r9, r3
 8003162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003172:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800317a:	460b      	mov	r3, r1
 800317c:	18db      	adds	r3, r3, r3
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
 8003180:	4613      	mov	r3, r2
 8003182:	eb42 0303 	adc.w	r3, r2, r3
 8003186:	657b      	str	r3, [r7, #84]	; 0x54
 8003188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800318c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003190:	f7fd f876 	bl	8000280 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <UART_SetConfig+0x2d4>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	011c      	lsls	r4, r3, #4
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031b4:	4642      	mov	r2, r8
 80031b6:	464b      	mov	r3, r9
 80031b8:	1891      	adds	r1, r2, r2
 80031ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80031bc:	415b      	adcs	r3, r3
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031c4:	4641      	mov	r1, r8
 80031c6:	eb12 0a01 	adds.w	sl, r2, r1
 80031ca:	4649      	mov	r1, r9
 80031cc:	eb43 0b01 	adc.w	fp, r3, r1
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e4:	4692      	mov	sl, r2
 80031e6:	469b      	mov	fp, r3
 80031e8:	4643      	mov	r3, r8
 80031ea:	eb1a 0303 	adds.w	r3, sl, r3
 80031ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb4b 0303 	adc.w	r3, fp, r3
 80031f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003208:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800320c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003210:	460b      	mov	r3, r1
 8003212:	18db      	adds	r3, r3, r3
 8003214:	643b      	str	r3, [r7, #64]	; 0x40
 8003216:	4613      	mov	r3, r2
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
 800321e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003226:	f7fd f82b 	bl	8000280 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4611      	mov	r1, r2
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <UART_SetConfig+0x2d4>)
 8003232:	fba3 2301 	umull	r2, r3, r3, r1
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2264      	movs	r2, #100	; 0x64
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	1acb      	subs	r3, r1, r3
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <UART_SetConfig+0x2d4>)
 8003248:	fba3 2302 	umull	r2, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003254:	441c      	add	r4, r3
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003260:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	1891      	adds	r1, r2, r2
 800326e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003270:	415b      	adcs	r3, r3
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003278:	4641      	mov	r1, r8
 800327a:	1851      	adds	r1, r2, r1
 800327c:	6339      	str	r1, [r7, #48]	; 0x30
 800327e:	4649      	mov	r1, r9
 8003280:	414b      	adcs	r3, r1
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003290:	4659      	mov	r1, fp
 8003292:	00cb      	lsls	r3, r1, #3
 8003294:	4651      	mov	r1, sl
 8003296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329a:	4651      	mov	r1, sl
 800329c:	00ca      	lsls	r2, r1, #3
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	4642      	mov	r2, r8
 80032a6:	189b      	adds	r3, r3, r2
 80032a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ac:	464b      	mov	r3, r9
 80032ae:	460a      	mov	r2, r1
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032cc:	460b      	mov	r3, r1
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d2:	4613      	mov	r3, r2
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032e2:	f7fc ffcd 	bl	8000280 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <UART_SetConfig+0x2d4>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <UART_SetConfig+0x2d4>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	f003 0207 	and.w	r2, r3, #7
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4422      	add	r2, r4
 8003312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003314:	e106      	b.n	8003524 <UART_SetConfig+0x4d8>
 8003316:	bf00      	nop
 8003318:	40011000 	.word	0x40011000
 800331c:	40011400 	.word	0x40011400
 8003320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800332e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003336:	4642      	mov	r2, r8
 8003338:	464b      	mov	r3, r9
 800333a:	1891      	adds	r1, r2, r2
 800333c:	6239      	str	r1, [r7, #32]
 800333e:	415b      	adcs	r3, r3
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003346:	4641      	mov	r1, r8
 8003348:	1854      	adds	r4, r2, r1
 800334a:	4649      	mov	r1, r9
 800334c:	eb43 0501 	adc.w	r5, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	00eb      	lsls	r3, r5, #3
 800335a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335e:	00e2      	lsls	r2, r4, #3
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	4643      	mov	r3, r8
 8003366:	18e3      	adds	r3, r4, r3
 8003368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800336c:	464b      	mov	r3, r9
 800336e:	eb45 0303 	adc.w	r3, r5, r3
 8003372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003382:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003392:	4629      	mov	r1, r5
 8003394:	008b      	lsls	r3, r1, #2
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339c:	4621      	mov	r1, r4
 800339e:	008a      	lsls	r2, r1, #2
 80033a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033a4:	f7fc ff6c 	bl	8000280 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b60      	ldr	r3, [pc, #384]	; (8003530 <UART_SetConfig+0x4e4>)
 80033ae:	fba3 2302 	umull	r2, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	011c      	lsls	r4, r3, #4
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	61b9      	str	r1, [r7, #24]
 80033d0:	415b      	adcs	r3, r3
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d8:	4641      	mov	r1, r8
 80033da:	1851      	adds	r1, r2, r1
 80033dc:	6139      	str	r1, [r7, #16]
 80033de:	4649      	mov	r1, r9
 80033e0:	414b      	adcs	r3, r1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f0:	4659      	mov	r1, fp
 80033f2:	00cb      	lsls	r3, r1, #3
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fa:	4651      	mov	r1, sl
 80033fc:	00ca      	lsls	r2, r1, #3
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4642      	mov	r2, r8
 8003406:	189b      	adds	r3, r3, r2
 8003408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800340c:	464b      	mov	r3, r9
 800340e:	460a      	mov	r2, r1
 8003410:	eb42 0303 	adc.w	r3, r2, r3
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	67bb      	str	r3, [r7, #120]	; 0x78
 8003422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003430:	4649      	mov	r1, r9
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343a:	4641      	mov	r1, r8
 800343c:	008a      	lsls	r2, r1, #2
 800343e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003442:	f7fc ff1d 	bl	8000280 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4611      	mov	r1, r2
 800344c:	4b38      	ldr	r3, [pc, #224]	; (8003530 <UART_SetConfig+0x4e4>)
 800344e:	fba3 2301 	umull	r2, r3, r3, r1
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2264      	movs	r2, #100	; 0x64
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	1acb      	subs	r3, r1, r3
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	3332      	adds	r3, #50	; 0x32
 8003460:	4a33      	ldr	r2, [pc, #204]	; (8003530 <UART_SetConfig+0x4e4>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	441c      	add	r4, r3
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	673b      	str	r3, [r7, #112]	; 0x70
 8003476:	677a      	str	r2, [r7, #116]	; 0x74
 8003478:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	415b      	adcs	r3, r3
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800348c:	4641      	mov	r1, r8
 800348e:	1851      	adds	r1, r2, r1
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	4649      	mov	r1, r9
 8003494:	414b      	adcs	r3, r1
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034a4:	4659      	mov	r1, fp
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ae:	4651      	mov	r1, sl
 80034b0:	00ca      	lsls	r2, r1, #3
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	4642      	mov	r2, r8
 80034ba:	189b      	adds	r3, r3, r2
 80034bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80034be:	464b      	mov	r3, r9
 80034c0:	460a      	mov	r2, r1
 80034c2:	eb42 0303 	adc.w	r3, r2, r3
 80034c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	663b      	str	r3, [r7, #96]	; 0x60
 80034d2:	667a      	str	r2, [r7, #100]	; 0x64
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034e0:	4649      	mov	r1, r9
 80034e2:	008b      	lsls	r3, r1, #2
 80034e4:	4641      	mov	r1, r8
 80034e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ea:	4641      	mov	r1, r8
 80034ec:	008a      	lsls	r2, r1, #2
 80034ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034f2:	f7fc fec5 	bl	8000280 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <UART_SetConfig+0x4e4>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	2164      	movs	r1, #100	; 0x64
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	3332      	adds	r3, #50	; 0x32
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <UART_SetConfig+0x4e4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4422      	add	r2, r4
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800352a:	46bd      	mov	sp, r7
 800352c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003530:	51eb851f 	.word	0x51eb851f

08003534 <siprintf>:
 8003534:	b40e      	push	{r1, r2, r3}
 8003536:	b500      	push	{lr}
 8003538:	b09c      	sub	sp, #112	; 0x70
 800353a:	ab1d      	add	r3, sp, #116	; 0x74
 800353c:	9002      	str	r0, [sp, #8]
 800353e:	9006      	str	r0, [sp, #24]
 8003540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003544:	4809      	ldr	r0, [pc, #36]	; (800356c <siprintf+0x38>)
 8003546:	9107      	str	r1, [sp, #28]
 8003548:	9104      	str	r1, [sp, #16]
 800354a:	4909      	ldr	r1, [pc, #36]	; (8003570 <siprintf+0x3c>)
 800354c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003550:	9105      	str	r1, [sp, #20]
 8003552:	6800      	ldr	r0, [r0, #0]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	a902      	add	r1, sp, #8
 8003558:	f000 f992 	bl	8003880 <_svfiprintf_r>
 800355c:	9b02      	ldr	r3, [sp, #8]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	b01c      	add	sp, #112	; 0x70
 8003564:	f85d eb04 	ldr.w	lr, [sp], #4
 8003568:	b003      	add	sp, #12
 800356a:	4770      	bx	lr
 800356c:	20000058 	.word	0x20000058
 8003570:	ffff0208 	.word	0xffff0208

08003574 <memset>:
 8003574:	4402      	add	r2, r0
 8003576:	4603      	mov	r3, r0
 8003578:	4293      	cmp	r3, r2
 800357a:	d100      	bne.n	800357e <memset+0xa>
 800357c:	4770      	bx	lr
 800357e:	f803 1b01 	strb.w	r1, [r3], #1
 8003582:	e7f9      	b.n	8003578 <memset+0x4>

08003584 <__errno>:
 8003584:	4b01      	ldr	r3, [pc, #4]	; (800358c <__errno+0x8>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000058 	.word	0x20000058

08003590 <__libc_init_array>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4d0d      	ldr	r5, [pc, #52]	; (80035c8 <__libc_init_array+0x38>)
 8003594:	4c0d      	ldr	r4, [pc, #52]	; (80035cc <__libc_init_array+0x3c>)
 8003596:	1b64      	subs	r4, r4, r5
 8003598:	10a4      	asrs	r4, r4, #2
 800359a:	2600      	movs	r6, #0
 800359c:	42a6      	cmp	r6, r4
 800359e:	d109      	bne.n	80035b4 <__libc_init_array+0x24>
 80035a0:	4d0b      	ldr	r5, [pc, #44]	; (80035d0 <__libc_init_array+0x40>)
 80035a2:	4c0c      	ldr	r4, [pc, #48]	; (80035d4 <__libc_init_array+0x44>)
 80035a4:	f000 fc6a 	bl	8003e7c <_init>
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	2600      	movs	r6, #0
 80035ae:	42a6      	cmp	r6, r4
 80035b0:	d105      	bne.n	80035be <__libc_init_array+0x2e>
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b8:	4798      	blx	r3
 80035ba:	3601      	adds	r6, #1
 80035bc:	e7ee      	b.n	800359c <__libc_init_array+0xc>
 80035be:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c2:	4798      	blx	r3
 80035c4:	3601      	adds	r6, #1
 80035c6:	e7f2      	b.n	80035ae <__libc_init_array+0x1e>
 80035c8:	08003ef4 	.word	0x08003ef4
 80035cc:	08003ef4 	.word	0x08003ef4
 80035d0:	08003ef4 	.word	0x08003ef4
 80035d4:	08003ef8 	.word	0x08003ef8

080035d8 <__retarget_lock_acquire_recursive>:
 80035d8:	4770      	bx	lr

080035da <__retarget_lock_release_recursive>:
 80035da:	4770      	bx	lr

080035dc <_free_r>:
 80035dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035de:	2900      	cmp	r1, #0
 80035e0:	d044      	beq.n	800366c <_free_r+0x90>
 80035e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e6:	9001      	str	r0, [sp, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f1a1 0404 	sub.w	r4, r1, #4
 80035ee:	bfb8      	it	lt
 80035f0:	18e4      	addlt	r4, r4, r3
 80035f2:	f000 f8df 	bl	80037b4 <__malloc_lock>
 80035f6:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <_free_r+0x94>)
 80035f8:	9801      	ldr	r0, [sp, #4]
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	b933      	cbnz	r3, 800360c <_free_r+0x30>
 80035fe:	6063      	str	r3, [r4, #4]
 8003600:	6014      	str	r4, [r2, #0]
 8003602:	b003      	add	sp, #12
 8003604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003608:	f000 b8da 	b.w	80037c0 <__malloc_unlock>
 800360c:	42a3      	cmp	r3, r4
 800360e:	d908      	bls.n	8003622 <_free_r+0x46>
 8003610:	6825      	ldr	r5, [r4, #0]
 8003612:	1961      	adds	r1, r4, r5
 8003614:	428b      	cmp	r3, r1
 8003616:	bf01      	itttt	eq
 8003618:	6819      	ldreq	r1, [r3, #0]
 800361a:	685b      	ldreq	r3, [r3, #4]
 800361c:	1949      	addeq	r1, r1, r5
 800361e:	6021      	streq	r1, [r4, #0]
 8003620:	e7ed      	b.n	80035fe <_free_r+0x22>
 8003622:	461a      	mov	r2, r3
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	b10b      	cbz	r3, 800362c <_free_r+0x50>
 8003628:	42a3      	cmp	r3, r4
 800362a:	d9fa      	bls.n	8003622 <_free_r+0x46>
 800362c:	6811      	ldr	r1, [r2, #0]
 800362e:	1855      	adds	r5, r2, r1
 8003630:	42a5      	cmp	r5, r4
 8003632:	d10b      	bne.n	800364c <_free_r+0x70>
 8003634:	6824      	ldr	r4, [r4, #0]
 8003636:	4421      	add	r1, r4
 8003638:	1854      	adds	r4, r2, r1
 800363a:	42a3      	cmp	r3, r4
 800363c:	6011      	str	r1, [r2, #0]
 800363e:	d1e0      	bne.n	8003602 <_free_r+0x26>
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	6053      	str	r3, [r2, #4]
 8003646:	440c      	add	r4, r1
 8003648:	6014      	str	r4, [r2, #0]
 800364a:	e7da      	b.n	8003602 <_free_r+0x26>
 800364c:	d902      	bls.n	8003654 <_free_r+0x78>
 800364e:	230c      	movs	r3, #12
 8003650:	6003      	str	r3, [r0, #0]
 8003652:	e7d6      	b.n	8003602 <_free_r+0x26>
 8003654:	6825      	ldr	r5, [r4, #0]
 8003656:	1961      	adds	r1, r4, r5
 8003658:	428b      	cmp	r3, r1
 800365a:	bf04      	itt	eq
 800365c:	6819      	ldreq	r1, [r3, #0]
 800365e:	685b      	ldreq	r3, [r3, #4]
 8003660:	6063      	str	r3, [r4, #4]
 8003662:	bf04      	itt	eq
 8003664:	1949      	addeq	r1, r1, r5
 8003666:	6021      	streq	r1, [r4, #0]
 8003668:	6054      	str	r4, [r2, #4]
 800366a:	e7ca      	b.n	8003602 <_free_r+0x26>
 800366c:	b003      	add	sp, #12
 800366e:	bd30      	pop	{r4, r5, pc}
 8003670:	20000294 	.word	0x20000294

08003674 <sbrk_aligned>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	4e0e      	ldr	r6, [pc, #56]	; (80036b0 <sbrk_aligned+0x3c>)
 8003678:	460c      	mov	r4, r1
 800367a:	6831      	ldr	r1, [r6, #0]
 800367c:	4605      	mov	r5, r0
 800367e:	b911      	cbnz	r1, 8003686 <sbrk_aligned+0x12>
 8003680:	f000 fba6 	bl	8003dd0 <_sbrk_r>
 8003684:	6030      	str	r0, [r6, #0]
 8003686:	4621      	mov	r1, r4
 8003688:	4628      	mov	r0, r5
 800368a:	f000 fba1 	bl	8003dd0 <_sbrk_r>
 800368e:	1c43      	adds	r3, r0, #1
 8003690:	d00a      	beq.n	80036a8 <sbrk_aligned+0x34>
 8003692:	1cc4      	adds	r4, r0, #3
 8003694:	f024 0403 	bic.w	r4, r4, #3
 8003698:	42a0      	cmp	r0, r4
 800369a:	d007      	beq.n	80036ac <sbrk_aligned+0x38>
 800369c:	1a21      	subs	r1, r4, r0
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 fb96 	bl	8003dd0 <_sbrk_r>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d101      	bne.n	80036ac <sbrk_aligned+0x38>
 80036a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80036ac:	4620      	mov	r0, r4
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	20000298 	.word	0x20000298

080036b4 <_malloc_r>:
 80036b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036b8:	1ccd      	adds	r5, r1, #3
 80036ba:	f025 0503 	bic.w	r5, r5, #3
 80036be:	3508      	adds	r5, #8
 80036c0:	2d0c      	cmp	r5, #12
 80036c2:	bf38      	it	cc
 80036c4:	250c      	movcc	r5, #12
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	4607      	mov	r7, r0
 80036ca:	db01      	blt.n	80036d0 <_malloc_r+0x1c>
 80036cc:	42a9      	cmp	r1, r5
 80036ce:	d905      	bls.n	80036dc <_malloc_r+0x28>
 80036d0:	230c      	movs	r3, #12
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	2600      	movs	r6, #0
 80036d6:	4630      	mov	r0, r6
 80036d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037b0 <_malloc_r+0xfc>
 80036e0:	f000 f868 	bl	80037b4 <__malloc_lock>
 80036e4:	f8d8 3000 	ldr.w	r3, [r8]
 80036e8:	461c      	mov	r4, r3
 80036ea:	bb5c      	cbnz	r4, 8003744 <_malloc_r+0x90>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4638      	mov	r0, r7
 80036f0:	f7ff ffc0 	bl	8003674 <sbrk_aligned>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	4604      	mov	r4, r0
 80036f8:	d155      	bne.n	80037a6 <_malloc_r+0xf2>
 80036fa:	f8d8 4000 	ldr.w	r4, [r8]
 80036fe:	4626      	mov	r6, r4
 8003700:	2e00      	cmp	r6, #0
 8003702:	d145      	bne.n	8003790 <_malloc_r+0xdc>
 8003704:	2c00      	cmp	r4, #0
 8003706:	d048      	beq.n	800379a <_malloc_r+0xe6>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	4631      	mov	r1, r6
 800370c:	4638      	mov	r0, r7
 800370e:	eb04 0903 	add.w	r9, r4, r3
 8003712:	f000 fb5d 	bl	8003dd0 <_sbrk_r>
 8003716:	4581      	cmp	r9, r0
 8003718:	d13f      	bne.n	800379a <_malloc_r+0xe6>
 800371a:	6821      	ldr	r1, [r4, #0]
 800371c:	1a6d      	subs	r5, r5, r1
 800371e:	4629      	mov	r1, r5
 8003720:	4638      	mov	r0, r7
 8003722:	f7ff ffa7 	bl	8003674 <sbrk_aligned>
 8003726:	3001      	adds	r0, #1
 8003728:	d037      	beq.n	800379a <_malloc_r+0xe6>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	442b      	add	r3, r5
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	f8d8 3000 	ldr.w	r3, [r8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d038      	beq.n	80037aa <_malloc_r+0xf6>
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	42a2      	cmp	r2, r4
 800373c:	d12b      	bne.n	8003796 <_malloc_r+0xe2>
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	e00f      	b.n	8003764 <_malloc_r+0xb0>
 8003744:	6822      	ldr	r2, [r4, #0]
 8003746:	1b52      	subs	r2, r2, r5
 8003748:	d41f      	bmi.n	800378a <_malloc_r+0xd6>
 800374a:	2a0b      	cmp	r2, #11
 800374c:	d917      	bls.n	800377e <_malloc_r+0xca>
 800374e:	1961      	adds	r1, r4, r5
 8003750:	42a3      	cmp	r3, r4
 8003752:	6025      	str	r5, [r4, #0]
 8003754:	bf18      	it	ne
 8003756:	6059      	strne	r1, [r3, #4]
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	bf08      	it	eq
 800375c:	f8c8 1000 	streq.w	r1, [r8]
 8003760:	5162      	str	r2, [r4, r5]
 8003762:	604b      	str	r3, [r1, #4]
 8003764:	4638      	mov	r0, r7
 8003766:	f104 060b 	add.w	r6, r4, #11
 800376a:	f000 f829 	bl	80037c0 <__malloc_unlock>
 800376e:	f026 0607 	bic.w	r6, r6, #7
 8003772:	1d23      	adds	r3, r4, #4
 8003774:	1af2      	subs	r2, r6, r3
 8003776:	d0ae      	beq.n	80036d6 <_malloc_r+0x22>
 8003778:	1b9b      	subs	r3, r3, r6
 800377a:	50a3      	str	r3, [r4, r2]
 800377c:	e7ab      	b.n	80036d6 <_malloc_r+0x22>
 800377e:	42a3      	cmp	r3, r4
 8003780:	6862      	ldr	r2, [r4, #4]
 8003782:	d1dd      	bne.n	8003740 <_malloc_r+0x8c>
 8003784:	f8c8 2000 	str.w	r2, [r8]
 8003788:	e7ec      	b.n	8003764 <_malloc_r+0xb0>
 800378a:	4623      	mov	r3, r4
 800378c:	6864      	ldr	r4, [r4, #4]
 800378e:	e7ac      	b.n	80036ea <_malloc_r+0x36>
 8003790:	4634      	mov	r4, r6
 8003792:	6876      	ldr	r6, [r6, #4]
 8003794:	e7b4      	b.n	8003700 <_malloc_r+0x4c>
 8003796:	4613      	mov	r3, r2
 8003798:	e7cc      	b.n	8003734 <_malloc_r+0x80>
 800379a:	230c      	movs	r3, #12
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4638      	mov	r0, r7
 80037a0:	f000 f80e 	bl	80037c0 <__malloc_unlock>
 80037a4:	e797      	b.n	80036d6 <_malloc_r+0x22>
 80037a6:	6025      	str	r5, [r4, #0]
 80037a8:	e7dc      	b.n	8003764 <_malloc_r+0xb0>
 80037aa:	605b      	str	r3, [r3, #4]
 80037ac:	deff      	udf	#255	; 0xff
 80037ae:	bf00      	nop
 80037b0:	20000294 	.word	0x20000294

080037b4 <__malloc_lock>:
 80037b4:	4801      	ldr	r0, [pc, #4]	; (80037bc <__malloc_lock+0x8>)
 80037b6:	f7ff bf0f 	b.w	80035d8 <__retarget_lock_acquire_recursive>
 80037ba:	bf00      	nop
 80037bc:	20000290 	.word	0x20000290

080037c0 <__malloc_unlock>:
 80037c0:	4801      	ldr	r0, [pc, #4]	; (80037c8 <__malloc_unlock+0x8>)
 80037c2:	f7ff bf0a 	b.w	80035da <__retarget_lock_release_recursive>
 80037c6:	bf00      	nop
 80037c8:	20000290 	.word	0x20000290

080037cc <__ssputs_r>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	688e      	ldr	r6, [r1, #8]
 80037d2:	461f      	mov	r7, r3
 80037d4:	42be      	cmp	r6, r7
 80037d6:	680b      	ldr	r3, [r1, #0]
 80037d8:	4682      	mov	sl, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	4690      	mov	r8, r2
 80037de:	d82c      	bhi.n	800383a <__ssputs_r+0x6e>
 80037e0:	898a      	ldrh	r2, [r1, #12]
 80037e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037e6:	d026      	beq.n	8003836 <__ssputs_r+0x6a>
 80037e8:	6965      	ldr	r5, [r4, #20]
 80037ea:	6909      	ldr	r1, [r1, #16]
 80037ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037f0:	eba3 0901 	sub.w	r9, r3, r1
 80037f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037f8:	1c7b      	adds	r3, r7, #1
 80037fa:	444b      	add	r3, r9
 80037fc:	106d      	asrs	r5, r5, #1
 80037fe:	429d      	cmp	r5, r3
 8003800:	bf38      	it	cc
 8003802:	461d      	movcc	r5, r3
 8003804:	0553      	lsls	r3, r2, #21
 8003806:	d527      	bpl.n	8003858 <__ssputs_r+0x8c>
 8003808:	4629      	mov	r1, r5
 800380a:	f7ff ff53 	bl	80036b4 <_malloc_r>
 800380e:	4606      	mov	r6, r0
 8003810:	b360      	cbz	r0, 800386c <__ssputs_r+0xa0>
 8003812:	6921      	ldr	r1, [r4, #16]
 8003814:	464a      	mov	r2, r9
 8003816:	f000 faeb 	bl	8003df0 <memcpy>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	6126      	str	r6, [r4, #16]
 8003828:	6165      	str	r5, [r4, #20]
 800382a:	444e      	add	r6, r9
 800382c:	eba5 0509 	sub.w	r5, r5, r9
 8003830:	6026      	str	r6, [r4, #0]
 8003832:	60a5      	str	r5, [r4, #8]
 8003834:	463e      	mov	r6, r7
 8003836:	42be      	cmp	r6, r7
 8003838:	d900      	bls.n	800383c <__ssputs_r+0x70>
 800383a:	463e      	mov	r6, r7
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	4632      	mov	r2, r6
 8003840:	4641      	mov	r1, r8
 8003842:	f000 faab 	bl	8003d9c <memmove>
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	1b9b      	subs	r3, r3, r6
 800384a:	60a3      	str	r3, [r4, #8]
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	4433      	add	r3, r6
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	2000      	movs	r0, #0
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	462a      	mov	r2, r5
 800385a:	f000 fad7 	bl	8003e0c <_realloc_r>
 800385e:	4606      	mov	r6, r0
 8003860:	2800      	cmp	r0, #0
 8003862:	d1e0      	bne.n	8003826 <__ssputs_r+0x5a>
 8003864:	6921      	ldr	r1, [r4, #16]
 8003866:	4650      	mov	r0, sl
 8003868:	f7ff feb8 	bl	80035dc <_free_r>
 800386c:	230c      	movs	r3, #12
 800386e:	f8ca 3000 	str.w	r3, [sl]
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800387e:	e7e9      	b.n	8003854 <__ssputs_r+0x88>

08003880 <_svfiprintf_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	4698      	mov	r8, r3
 8003886:	898b      	ldrh	r3, [r1, #12]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	b09d      	sub	sp, #116	; 0x74
 800388c:	4607      	mov	r7, r0
 800388e:	460d      	mov	r5, r1
 8003890:	4614      	mov	r4, r2
 8003892:	d50e      	bpl.n	80038b2 <_svfiprintf_r+0x32>
 8003894:	690b      	ldr	r3, [r1, #16]
 8003896:	b963      	cbnz	r3, 80038b2 <_svfiprintf_r+0x32>
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	f7ff ff0b 	bl	80036b4 <_malloc_r>
 800389e:	6028      	str	r0, [r5, #0]
 80038a0:	6128      	str	r0, [r5, #16]
 80038a2:	b920      	cbnz	r0, 80038ae <_svfiprintf_r+0x2e>
 80038a4:	230c      	movs	r3, #12
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ac:	e0d0      	b.n	8003a50 <_svfiprintf_r+0x1d0>
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	616b      	str	r3, [r5, #20]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9309      	str	r3, [sp, #36]	; 0x24
 80038b6:	2320      	movs	r3, #32
 80038b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c0:	2330      	movs	r3, #48	; 0x30
 80038c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a68 <_svfiprintf_r+0x1e8>
 80038c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ca:	f04f 0901 	mov.w	r9, #1
 80038ce:	4623      	mov	r3, r4
 80038d0:	469a      	mov	sl, r3
 80038d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d6:	b10a      	cbz	r2, 80038dc <_svfiprintf_r+0x5c>
 80038d8:	2a25      	cmp	r2, #37	; 0x25
 80038da:	d1f9      	bne.n	80038d0 <_svfiprintf_r+0x50>
 80038dc:	ebba 0b04 	subs.w	fp, sl, r4
 80038e0:	d00b      	beq.n	80038fa <_svfiprintf_r+0x7a>
 80038e2:	465b      	mov	r3, fp
 80038e4:	4622      	mov	r2, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	4638      	mov	r0, r7
 80038ea:	f7ff ff6f 	bl	80037cc <__ssputs_r>
 80038ee:	3001      	adds	r0, #1
 80038f0:	f000 80a9 	beq.w	8003a46 <_svfiprintf_r+0x1c6>
 80038f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f6:	445a      	add	r2, fp
 80038f8:	9209      	str	r2, [sp, #36]	; 0x24
 80038fa:	f89a 3000 	ldrb.w	r3, [sl]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a1 	beq.w	8003a46 <_svfiprintf_r+0x1c6>
 8003904:	2300      	movs	r3, #0
 8003906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800390a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800390e:	f10a 0a01 	add.w	sl, sl, #1
 8003912:	9304      	str	r3, [sp, #16]
 8003914:	9307      	str	r3, [sp, #28]
 8003916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800391a:	931a      	str	r3, [sp, #104]	; 0x68
 800391c:	4654      	mov	r4, sl
 800391e:	2205      	movs	r2, #5
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	4850      	ldr	r0, [pc, #320]	; (8003a68 <_svfiprintf_r+0x1e8>)
 8003926:	f7fc fc5b 	bl	80001e0 <memchr>
 800392a:	9a04      	ldr	r2, [sp, #16]
 800392c:	b9d8      	cbnz	r0, 8003966 <_svfiprintf_r+0xe6>
 800392e:	06d0      	lsls	r0, r2, #27
 8003930:	bf44      	itt	mi
 8003932:	2320      	movmi	r3, #32
 8003934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003938:	0711      	lsls	r1, r2, #28
 800393a:	bf44      	itt	mi
 800393c:	232b      	movmi	r3, #43	; 0x2b
 800393e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003942:	f89a 3000 	ldrb.w	r3, [sl]
 8003946:	2b2a      	cmp	r3, #42	; 0x2a
 8003948:	d015      	beq.n	8003976 <_svfiprintf_r+0xf6>
 800394a:	9a07      	ldr	r2, [sp, #28]
 800394c:	4654      	mov	r4, sl
 800394e:	2000      	movs	r0, #0
 8003950:	f04f 0c0a 	mov.w	ip, #10
 8003954:	4621      	mov	r1, r4
 8003956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800395a:	3b30      	subs	r3, #48	; 0x30
 800395c:	2b09      	cmp	r3, #9
 800395e:	d94d      	bls.n	80039fc <_svfiprintf_r+0x17c>
 8003960:	b1b0      	cbz	r0, 8003990 <_svfiprintf_r+0x110>
 8003962:	9207      	str	r2, [sp, #28]
 8003964:	e014      	b.n	8003990 <_svfiprintf_r+0x110>
 8003966:	eba0 0308 	sub.w	r3, r0, r8
 800396a:	fa09 f303 	lsl.w	r3, r9, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	9304      	str	r3, [sp, #16]
 8003972:	46a2      	mov	sl, r4
 8003974:	e7d2      	b.n	800391c <_svfiprintf_r+0x9c>
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	1d19      	adds	r1, r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	9103      	str	r1, [sp, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfbb      	ittet	lt
 8003982:	425b      	neglt	r3, r3
 8003984:	f042 0202 	orrlt.w	r2, r2, #2
 8003988:	9307      	strge	r3, [sp, #28]
 800398a:	9307      	strlt	r3, [sp, #28]
 800398c:	bfb8      	it	lt
 800398e:	9204      	strlt	r2, [sp, #16]
 8003990:	7823      	ldrb	r3, [r4, #0]
 8003992:	2b2e      	cmp	r3, #46	; 0x2e
 8003994:	d10c      	bne.n	80039b0 <_svfiprintf_r+0x130>
 8003996:	7863      	ldrb	r3, [r4, #1]
 8003998:	2b2a      	cmp	r3, #42	; 0x2a
 800399a:	d134      	bne.n	8003a06 <_svfiprintf_r+0x186>
 800399c:	9b03      	ldr	r3, [sp, #12]
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	9203      	str	r2, [sp, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bfb8      	it	lt
 80039a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039ac:	3402      	adds	r4, #2
 80039ae:	9305      	str	r3, [sp, #20]
 80039b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003a78 <_svfiprintf_r+0x1f8>
 80039b4:	7821      	ldrb	r1, [r4, #0]
 80039b6:	2203      	movs	r2, #3
 80039b8:	4650      	mov	r0, sl
 80039ba:	f7fc fc11 	bl	80001e0 <memchr>
 80039be:	b138      	cbz	r0, 80039d0 <_svfiprintf_r+0x150>
 80039c0:	9b04      	ldr	r3, [sp, #16]
 80039c2:	eba0 000a 	sub.w	r0, r0, sl
 80039c6:	2240      	movs	r2, #64	; 0x40
 80039c8:	4082      	lsls	r2, r0
 80039ca:	4313      	orrs	r3, r2
 80039cc:	3401      	adds	r4, #1
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d4:	4825      	ldr	r0, [pc, #148]	; (8003a6c <_svfiprintf_r+0x1ec>)
 80039d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039da:	2206      	movs	r2, #6
 80039dc:	f7fc fc00 	bl	80001e0 <memchr>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d038      	beq.n	8003a56 <_svfiprintf_r+0x1d6>
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <_svfiprintf_r+0x1f0>)
 80039e6:	bb1b      	cbnz	r3, 8003a30 <_svfiprintf_r+0x1b0>
 80039e8:	9b03      	ldr	r3, [sp, #12]
 80039ea:	3307      	adds	r3, #7
 80039ec:	f023 0307 	bic.w	r3, r3, #7
 80039f0:	3308      	adds	r3, #8
 80039f2:	9303      	str	r3, [sp, #12]
 80039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f6:	4433      	add	r3, r6
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
 80039fa:	e768      	b.n	80038ce <_svfiprintf_r+0x4e>
 80039fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a00:	460c      	mov	r4, r1
 8003a02:	2001      	movs	r0, #1
 8003a04:	e7a6      	b.n	8003954 <_svfiprintf_r+0xd4>
 8003a06:	2300      	movs	r3, #0
 8003a08:	3401      	adds	r4, #1
 8003a0a:	9305      	str	r3, [sp, #20]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f04f 0c0a 	mov.w	ip, #10
 8003a12:	4620      	mov	r0, r4
 8003a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a18:	3a30      	subs	r2, #48	; 0x30
 8003a1a:	2a09      	cmp	r2, #9
 8003a1c:	d903      	bls.n	8003a26 <_svfiprintf_r+0x1a6>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0c6      	beq.n	80039b0 <_svfiprintf_r+0x130>
 8003a22:	9105      	str	r1, [sp, #20]
 8003a24:	e7c4      	b.n	80039b0 <_svfiprintf_r+0x130>
 8003a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e7f0      	b.n	8003a12 <_svfiprintf_r+0x192>
 8003a30:	ab03      	add	r3, sp, #12
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	462a      	mov	r2, r5
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <_svfiprintf_r+0x1f4>)
 8003a38:	a904      	add	r1, sp, #16
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f3af 8000 	nop.w
 8003a40:	1c42      	adds	r2, r0, #1
 8003a42:	4606      	mov	r6, r0
 8003a44:	d1d6      	bne.n	80039f4 <_svfiprintf_r+0x174>
 8003a46:	89ab      	ldrh	r3, [r5, #12]
 8003a48:	065b      	lsls	r3, r3, #25
 8003a4a:	f53f af2d 	bmi.w	80038a8 <_svfiprintf_r+0x28>
 8003a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a50:	b01d      	add	sp, #116	; 0x74
 8003a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a56:	ab03      	add	r3, sp, #12
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	462a      	mov	r2, r5
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <_svfiprintf_r+0x1f4>)
 8003a5e:	a904      	add	r1, sp, #16
 8003a60:	4638      	mov	r0, r7
 8003a62:	f000 f879 	bl	8003b58 <_printf_i>
 8003a66:	e7eb      	b.n	8003a40 <_svfiprintf_r+0x1c0>
 8003a68:	08003eb8 	.word	0x08003eb8
 8003a6c:	08003ec2 	.word	0x08003ec2
 8003a70:	00000000 	.word	0x00000000
 8003a74:	080037cd 	.word	0x080037cd
 8003a78:	08003ebe 	.word	0x08003ebe

08003a7c <_printf_common>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	4616      	mov	r6, r2
 8003a82:	4699      	mov	r9, r3
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bfb8      	it	lt
 8003a90:	4613      	movlt	r3, r2
 8003a92:	6033      	str	r3, [r6, #0]
 8003a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a98:	4607      	mov	r7, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	b10a      	cbz	r2, 8003aa2 <_printf_common+0x26>
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	0699      	lsls	r1, r3, #26
 8003aa6:	bf42      	ittt	mi
 8003aa8:	6833      	ldrmi	r3, [r6, #0]
 8003aaa:	3302      	addmi	r3, #2
 8003aac:	6033      	strmi	r3, [r6, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	f015 0506 	ands.w	r5, r5, #6
 8003ab4:	d106      	bne.n	8003ac4 <_printf_common+0x48>
 8003ab6:	f104 0a19 	add.w	sl, r4, #25
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dc26      	bgt.n	8003b12 <_printf_common+0x96>
 8003ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ac8:	1e13      	subs	r3, r2, #0
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	0692      	lsls	r2, r2, #26
 8003ad2:	d42b      	bmi.n	8003b2c <_printf_common+0xb0>
 8003ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4638      	mov	r0, r7
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d01e      	beq.n	8003b20 <_printf_common+0xa4>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	6922      	ldr	r2, [r4, #16]
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf02      	ittt	eq
 8003aee:	68e5      	ldreq	r5, [r4, #12]
 8003af0:	6833      	ldreq	r3, [r6, #0]
 8003af2:	1aed      	subeq	r5, r5, r3
 8003af4:	68a3      	ldr	r3, [r4, #8]
 8003af6:	bf0c      	ite	eq
 8003af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003afc:	2500      	movne	r5, #0
 8003afe:	4293      	cmp	r3, r2
 8003b00:	bfc4      	itt	gt
 8003b02:	1a9b      	subgt	r3, r3, r2
 8003b04:	18ed      	addgt	r5, r5, r3
 8003b06:	2600      	movs	r6, #0
 8003b08:	341a      	adds	r4, #26
 8003b0a:	42b5      	cmp	r5, r6
 8003b0c:	d11a      	bne.n	8003b44 <_printf_common+0xc8>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e008      	b.n	8003b24 <_printf_common+0xa8>
 8003b12:	2301      	movs	r3, #1
 8003b14:	4652      	mov	r2, sl
 8003b16:	4649      	mov	r1, r9
 8003b18:	4638      	mov	r0, r7
 8003b1a:	47c0      	blx	r8
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d103      	bne.n	8003b28 <_printf_common+0xac>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	3501      	adds	r5, #1
 8003b2a:	e7c6      	b.n	8003aba <_printf_common+0x3e>
 8003b2c:	18e1      	adds	r1, r4, r3
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	2030      	movs	r0, #48	; 0x30
 8003b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b36:	4422      	add	r2, r4
 8003b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b40:	3302      	adds	r3, #2
 8003b42:	e7c7      	b.n	8003ad4 <_printf_common+0x58>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4622      	mov	r2, r4
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d0e6      	beq.n	8003b20 <_printf_common+0xa4>
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7d9      	b.n	8003b0a <_printf_common+0x8e>
	...

08003b58 <_printf_i>:
 8003b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	7e0f      	ldrb	r7, [r1, #24]
 8003b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b60:	2f78      	cmp	r7, #120	; 0x78
 8003b62:	4691      	mov	r9, r2
 8003b64:	4680      	mov	r8, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	469a      	mov	sl, r3
 8003b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b6e:	d807      	bhi.n	8003b80 <_printf_i+0x28>
 8003b70:	2f62      	cmp	r7, #98	; 0x62
 8003b72:	d80a      	bhi.n	8003b8a <_printf_i+0x32>
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	f000 80d4 	beq.w	8003d22 <_printf_i+0x1ca>
 8003b7a:	2f58      	cmp	r7, #88	; 0x58
 8003b7c:	f000 80c0 	beq.w	8003d00 <_printf_i+0x1a8>
 8003b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b88:	e03a      	b.n	8003c00 <_printf_i+0xa8>
 8003b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b8e:	2b15      	cmp	r3, #21
 8003b90:	d8f6      	bhi.n	8003b80 <_printf_i+0x28>
 8003b92:	a101      	add	r1, pc, #4	; (adr r1, 8003b98 <_printf_i+0x40>)
 8003b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b98:	08003bf1 	.word	0x08003bf1
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003b81 	.word	0x08003b81
 8003ba4:	08003b81 	.word	0x08003b81
 8003ba8:	08003b81 	.word	0x08003b81
 8003bac:	08003b81 	.word	0x08003b81
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b81 	.word	0x08003b81
 8003bb8:	08003b81 	.word	0x08003b81
 8003bbc:	08003b81 	.word	0x08003b81
 8003bc0:	08003b81 	.word	0x08003b81
 8003bc4:	08003d09 	.word	0x08003d09
 8003bc8:	08003c31 	.word	0x08003c31
 8003bcc:	08003cc3 	.word	0x08003cc3
 8003bd0:	08003b81 	.word	0x08003b81
 8003bd4:	08003b81 	.word	0x08003b81
 8003bd8:	08003d2b 	.word	0x08003d2b
 8003bdc:	08003b81 	.word	0x08003b81
 8003be0:	08003c31 	.word	0x08003c31
 8003be4:	08003b81 	.word	0x08003b81
 8003be8:	08003b81 	.word	0x08003b81
 8003bec:	08003ccb 	.word	0x08003ccb
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	602a      	str	r2, [r5, #0]
 8003bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c00:	2301      	movs	r3, #1
 8003c02:	e09f      	b.n	8003d44 <_printf_i+0x1ec>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	0607      	lsls	r7, r0, #24
 8003c0a:	f103 0104 	add.w	r1, r3, #4
 8003c0e:	6029      	str	r1, [r5, #0]
 8003c10:	d501      	bpl.n	8003c16 <_printf_i+0xbe>
 8003c12:	681e      	ldr	r6, [r3, #0]
 8003c14:	e003      	b.n	8003c1e <_printf_i+0xc6>
 8003c16:	0646      	lsls	r6, r0, #25
 8003c18:	d5fb      	bpl.n	8003c12 <_printf_i+0xba>
 8003c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c1e:	2e00      	cmp	r6, #0
 8003c20:	da03      	bge.n	8003c2a <_printf_i+0xd2>
 8003c22:	232d      	movs	r3, #45	; 0x2d
 8003c24:	4276      	negs	r6, r6
 8003c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2a:	485a      	ldr	r0, [pc, #360]	; (8003d94 <_printf_i+0x23c>)
 8003c2c:	230a      	movs	r3, #10
 8003c2e:	e012      	b.n	8003c56 <_printf_i+0xfe>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	6820      	ldr	r0, [r4, #0]
 8003c34:	1d19      	adds	r1, r3, #4
 8003c36:	6029      	str	r1, [r5, #0]
 8003c38:	0605      	lsls	r5, r0, #24
 8003c3a:	d501      	bpl.n	8003c40 <_printf_i+0xe8>
 8003c3c:	681e      	ldr	r6, [r3, #0]
 8003c3e:	e002      	b.n	8003c46 <_printf_i+0xee>
 8003c40:	0641      	lsls	r1, r0, #25
 8003c42:	d5fb      	bpl.n	8003c3c <_printf_i+0xe4>
 8003c44:	881e      	ldrh	r6, [r3, #0]
 8003c46:	4853      	ldr	r0, [pc, #332]	; (8003d94 <_printf_i+0x23c>)
 8003c48:	2f6f      	cmp	r7, #111	; 0x6f
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2308      	moveq	r3, #8
 8003c4e:	230a      	movne	r3, #10
 8003c50:	2100      	movs	r1, #0
 8003c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c56:	6865      	ldr	r5, [r4, #4]
 8003c58:	60a5      	str	r5, [r4, #8]
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	bfa2      	ittt	ge
 8003c5e:	6821      	ldrge	r1, [r4, #0]
 8003c60:	f021 0104 	bicge.w	r1, r1, #4
 8003c64:	6021      	strge	r1, [r4, #0]
 8003c66:	b90e      	cbnz	r6, 8003c6c <_printf_i+0x114>
 8003c68:	2d00      	cmp	r5, #0
 8003c6a:	d04b      	beq.n	8003d04 <_printf_i+0x1ac>
 8003c6c:	4615      	mov	r5, r2
 8003c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c72:	fb03 6711 	mls	r7, r3, r1, r6
 8003c76:	5dc7      	ldrb	r7, [r0, r7]
 8003c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c7c:	4637      	mov	r7, r6
 8003c7e:	42bb      	cmp	r3, r7
 8003c80:	460e      	mov	r6, r1
 8003c82:	d9f4      	bls.n	8003c6e <_printf_i+0x116>
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d10b      	bne.n	8003ca0 <_printf_i+0x148>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	07de      	lsls	r6, r3, #31
 8003c8c:	d508      	bpl.n	8003ca0 <_printf_i+0x148>
 8003c8e:	6923      	ldr	r3, [r4, #16]
 8003c90:	6861      	ldr	r1, [r4, #4]
 8003c92:	4299      	cmp	r1, r3
 8003c94:	bfde      	ittt	le
 8003c96:	2330      	movle	r3, #48	; 0x30
 8003c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ca0:	1b52      	subs	r2, r2, r5
 8003ca2:	6122      	str	r2, [r4, #16]
 8003ca4:	f8cd a000 	str.w	sl, [sp]
 8003ca8:	464b      	mov	r3, r9
 8003caa:	aa03      	add	r2, sp, #12
 8003cac:	4621      	mov	r1, r4
 8003cae:	4640      	mov	r0, r8
 8003cb0:	f7ff fee4 	bl	8003a7c <_printf_common>
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d14a      	bne.n	8003d4e <_printf_i+0x1f6>
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cbc:	b004      	add	sp, #16
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	f043 0320 	orr.w	r3, r3, #32
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	4833      	ldr	r0, [pc, #204]	; (8003d98 <_printf_i+0x240>)
 8003ccc:	2778      	movs	r7, #120	; 0x78
 8003cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	6829      	ldr	r1, [r5, #0]
 8003cd6:	061f      	lsls	r7, r3, #24
 8003cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cdc:	d402      	bmi.n	8003ce4 <_printf_i+0x18c>
 8003cde:	065f      	lsls	r7, r3, #25
 8003ce0:	bf48      	it	mi
 8003ce2:	b2b6      	uxthmi	r6, r6
 8003ce4:	07df      	lsls	r7, r3, #31
 8003ce6:	bf48      	it	mi
 8003ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8003cec:	6029      	str	r1, [r5, #0]
 8003cee:	bf48      	it	mi
 8003cf0:	6023      	strmi	r3, [r4, #0]
 8003cf2:	b91e      	cbnz	r6, 8003cfc <_printf_i+0x1a4>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	f023 0320 	bic.w	r3, r3, #32
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	e7a7      	b.n	8003c50 <_printf_i+0xf8>
 8003d00:	4824      	ldr	r0, [pc, #144]	; (8003d94 <_printf_i+0x23c>)
 8003d02:	e7e4      	b.n	8003cce <_printf_i+0x176>
 8003d04:	4615      	mov	r5, r2
 8003d06:	e7bd      	b.n	8003c84 <_printf_i+0x12c>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	6826      	ldr	r6, [r4, #0]
 8003d0c:	6961      	ldr	r1, [r4, #20]
 8003d0e:	1d18      	adds	r0, r3, #4
 8003d10:	6028      	str	r0, [r5, #0]
 8003d12:	0635      	lsls	r5, r6, #24
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	d501      	bpl.n	8003d1c <_printf_i+0x1c4>
 8003d18:	6019      	str	r1, [r3, #0]
 8003d1a:	e002      	b.n	8003d22 <_printf_i+0x1ca>
 8003d1c:	0670      	lsls	r0, r6, #25
 8003d1e:	d5fb      	bpl.n	8003d18 <_printf_i+0x1c0>
 8003d20:	8019      	strh	r1, [r3, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	6123      	str	r3, [r4, #16]
 8003d26:	4615      	mov	r5, r2
 8003d28:	e7bc      	b.n	8003ca4 <_printf_i+0x14c>
 8003d2a:	682b      	ldr	r3, [r5, #0]
 8003d2c:	1d1a      	adds	r2, r3, #4
 8003d2e:	602a      	str	r2, [r5, #0]
 8003d30:	681d      	ldr	r5, [r3, #0]
 8003d32:	6862      	ldr	r2, [r4, #4]
 8003d34:	2100      	movs	r1, #0
 8003d36:	4628      	mov	r0, r5
 8003d38:	f7fc fa52 	bl	80001e0 <memchr>
 8003d3c:	b108      	cbz	r0, 8003d42 <_printf_i+0x1ea>
 8003d3e:	1b40      	subs	r0, r0, r5
 8003d40:	6060      	str	r0, [r4, #4]
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	2300      	movs	r3, #0
 8003d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d4c:	e7aa      	b.n	8003ca4 <_printf_i+0x14c>
 8003d4e:	6923      	ldr	r3, [r4, #16]
 8003d50:	462a      	mov	r2, r5
 8003d52:	4649      	mov	r1, r9
 8003d54:	4640      	mov	r0, r8
 8003d56:	47d0      	blx	sl
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d0ad      	beq.n	8003cb8 <_printf_i+0x160>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	079b      	lsls	r3, r3, #30
 8003d60:	d413      	bmi.n	8003d8a <_printf_i+0x232>
 8003d62:	68e0      	ldr	r0, [r4, #12]
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	4298      	cmp	r0, r3
 8003d68:	bfb8      	it	lt
 8003d6a:	4618      	movlt	r0, r3
 8003d6c:	e7a6      	b.n	8003cbc <_printf_i+0x164>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	4632      	mov	r2, r6
 8003d72:	4649      	mov	r1, r9
 8003d74:	4640      	mov	r0, r8
 8003d76:	47d0      	blx	sl
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d09d      	beq.n	8003cb8 <_printf_i+0x160>
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	9903      	ldr	r1, [sp, #12]
 8003d82:	1a5b      	subs	r3, r3, r1
 8003d84:	42ab      	cmp	r3, r5
 8003d86:	dcf2      	bgt.n	8003d6e <_printf_i+0x216>
 8003d88:	e7eb      	b.n	8003d62 <_printf_i+0x20a>
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	f104 0619 	add.w	r6, r4, #25
 8003d90:	e7f5      	b.n	8003d7e <_printf_i+0x226>
 8003d92:	bf00      	nop
 8003d94:	08003ec9 	.word	0x08003ec9
 8003d98:	08003eda 	.word	0x08003eda

08003d9c <memmove>:
 8003d9c:	4288      	cmp	r0, r1
 8003d9e:	b510      	push	{r4, lr}
 8003da0:	eb01 0402 	add.w	r4, r1, r2
 8003da4:	d902      	bls.n	8003dac <memmove+0x10>
 8003da6:	4284      	cmp	r4, r0
 8003da8:	4623      	mov	r3, r4
 8003daa:	d807      	bhi.n	8003dbc <memmove+0x20>
 8003dac:	1e43      	subs	r3, r0, #1
 8003dae:	42a1      	cmp	r1, r4
 8003db0:	d008      	beq.n	8003dc4 <memmove+0x28>
 8003db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dba:	e7f8      	b.n	8003dae <memmove+0x12>
 8003dbc:	4402      	add	r2, r0
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	428a      	cmp	r2, r1
 8003dc2:	d100      	bne.n	8003dc6 <memmove+0x2a>
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dce:	e7f7      	b.n	8003dc0 <memmove+0x24>

08003dd0 <_sbrk_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4d06      	ldr	r5, [pc, #24]	; (8003dec <_sbrk_r+0x1c>)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	f7fc fe8e 	bl	8000afc <_sbrk>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_sbrk_r+0x1a>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_sbrk_r+0x1a>
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	2000028c 	.word	0x2000028c

08003df0 <memcpy>:
 8003df0:	440a      	add	r2, r1
 8003df2:	4291      	cmp	r1, r2
 8003df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003df8:	d100      	bne.n	8003dfc <memcpy+0xc>
 8003dfa:	4770      	bx	lr
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e06:	4291      	cmp	r1, r2
 8003e08:	d1f9      	bne.n	8003dfe <memcpy+0xe>
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <_realloc_r>:
 8003e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e10:	4680      	mov	r8, r0
 8003e12:	4614      	mov	r4, r2
 8003e14:	460e      	mov	r6, r1
 8003e16:	b921      	cbnz	r1, 8003e22 <_realloc_r+0x16>
 8003e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	f7ff bc49 	b.w	80036b4 <_malloc_r>
 8003e22:	b92a      	cbnz	r2, 8003e30 <_realloc_r+0x24>
 8003e24:	f7ff fbda 	bl	80035dc <_free_r>
 8003e28:	4625      	mov	r5, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	f000 f81b 	bl	8003e6a <_malloc_usable_size_r>
 8003e34:	4284      	cmp	r4, r0
 8003e36:	4607      	mov	r7, r0
 8003e38:	d802      	bhi.n	8003e40 <_realloc_r+0x34>
 8003e3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e3e:	d812      	bhi.n	8003e66 <_realloc_r+0x5a>
 8003e40:	4621      	mov	r1, r4
 8003e42:	4640      	mov	r0, r8
 8003e44:	f7ff fc36 	bl	80036b4 <_malloc_r>
 8003e48:	4605      	mov	r5, r0
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0ed      	beq.n	8003e2a <_realloc_r+0x1e>
 8003e4e:	42bc      	cmp	r4, r7
 8003e50:	4622      	mov	r2, r4
 8003e52:	4631      	mov	r1, r6
 8003e54:	bf28      	it	cs
 8003e56:	463a      	movcs	r2, r7
 8003e58:	f7ff ffca 	bl	8003df0 <memcpy>
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f7ff fbbc 	bl	80035dc <_free_r>
 8003e64:	e7e1      	b.n	8003e2a <_realloc_r+0x1e>
 8003e66:	4635      	mov	r5, r6
 8003e68:	e7df      	b.n	8003e2a <_realloc_r+0x1e>

08003e6a <_malloc_usable_size_r>:
 8003e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e6e:	1f18      	subs	r0, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bfbc      	itt	lt
 8003e74:	580b      	ldrlt	r3, [r1, r0]
 8003e76:	18c0      	addlt	r0, r0, r3
 8003e78:	4770      	bx	lr
	...

08003e7c <_init>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr

08003e88 <_fini>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr
